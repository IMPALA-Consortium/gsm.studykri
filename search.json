[{"path":"https://impala-consortium.github.io/gsm.studykri/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 IMPALA Consortium Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/articles/Cookbook.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Cookbook","text":"","code":"install.packages(\"pak\") pak::pak(\"Gilead-BioStats/clindata\") pak::pak(\"Gilead-BioStats/gsm.core\") pak::pak(\"Gilead-BioStats/gsm.mapping\") pak::pak(\"Gilead-BioStats/gsm.kri\") pak::pak(\"Gilead-BioStats/gsm.reporting\") pak::pak(\"IMPALA-Consortium/gsm.simaerep\")"},{"path":"https://impala-consortium.github.io/gsm.studykri/articles/Cookbook.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Cookbook","text":"","code":"suppressPackageStartupMessages(library(dplyr)) library(gsm.core) library(gsm.mapping) library(gsm.kri) library(gsm.reporting) library(gsm.studykri)"},{"path":"https://impala-consortium.github.io/gsm.studykri/articles/Cookbook.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cookbook","text":"{gsm.studykir} presents new approach calculating KRI lower upper limits study-level quality monitoring clincial trials. method uses bootstrapping calculate confidence intervals gor given study -time. confidence intervals can used compare study-level KRI fixed expectation confidence intervalls KRI values time one reference studies. bootstrapping method resamples new set sites replacement original study data set.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/articles/Cookbook.html","id":"simulate-data-set","dir":"Articles","previous_headings":"","what":"Simulate Data Set","title":"Cookbook","text":"use clindata package includes data one clinical study simulate new study data. create portfolio study AA-4 oversampling patients low AE counts.","code":"lRaw <- list(   Raw_SITE = clindata::ctms_site,   Raw_STUDY = clindata::ctms_study,   Raw_PD = clindata::ctms_protdev,   Raw_DATAENT = clindata::edc_data_pages,   Raw_QUERY = clindata::edc_queries,   Raw_AE = clindata::rawplus_ae,   Raw_SUBJ = clindata::rawplus_dm,   Raw_ENROLL = clindata::rawplus_enroll,   Raw_Randomization = clindata::rawplus_ixrsrand,   Raw_LB = clindata::rawplus_lb,   Raw_SDRGCOMP = clindata::rawplus_sdrgcomp,   Raw_STUDCOMP = clindata::rawplus_studcomp,   Raw_VISIT = clindata::rawplus_visdt )  lPortfolio <- SimulatePortfolio(   lRaw = lRaw,   nStudies = 4,   dfConfig = tibble(     studyid = c(\"AA-1\", \"AA-2\", \"AA-3\", \"AA-4\"),     nSubjects = c(500, 750, 150, 200),     strOversamplDomain = rep(\"Raw_AE\", 4),     vOversamplQuantileRange_min = c(0, 0, 0, 0),     vOversamplQuantileRange_max = c(1, 1, 1, 0.75)   ) ) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 773 subjects with Raw_AE records in 0.00-0.75 quantile range (1-6 records)"},{"path":"https://impala-consortium.github.io/gsm.studykri/articles/Cookbook.html","id":"calculate-kri","dir":"Articles","previous_headings":"","what":"Calculate KRI","title":"Cookbook","text":"calculate KRI “AE per visit”. need create three dataframes: dfSubjects: Subject-level data links subjects sites demographics domain dfNumerator: Subject-level data contains events counted (AEs case) dfDenominator: Subject-level data contains denominator events (visits case transform return site-level count numerator denominator per month Alternatively can also use days study denominator passing subjects denominator end date. Next transform data return cumulated event counts study-level study month. define first study month month reached first 25 Denominator counts across sites account data artifacts. generate site-level bootstrap simulations study AA-4 oversampled low AE counts. aggregate site-level bootstrap iteration study-level. study-level bootstrap results can calculate 95% confidence intervalls. can plot preliminary results.  generate portfolio reference confidence intervals. calculating reference bound study smalles number sites determines total amount sites sampled study, study contributes equally reference distribution. Now can plot final results.  can also plot members reference portfolio.","code":"dfInput <- gsm.studykri::Input_CountSiteByMonth(       dfSubjects = lPortfolio$Raw_SUBJ,       dfNumerator = lPortfolio$Raw_AE,       dfDenominator = lPortfolio$Raw_VISIT,       strStudyCol = \"studyid\",       strGroupCol = \"invid\",       strGroupLevel = \"Site\",       strSubjectCol = \"subjid\",       strNumeratorDateCol = \"aest_dt\",       strDenominatorDateCol = \"visit_dt\",   ) %>%   tibble()  dfInput #> # A tibble: 18,945 × 7 #>    GroupID    GroupLevel Numerator Denominator Metric StudyID MonthYYYYMM #>    <chr>      <chr>          <int>       <int>  <dbl> <chr>         <dbl> #>  1 AA-1_0X004 Site               3           3      1 AA-1         200909 #>  2 AA-1_0X004 Site               1           1      1 AA-1         201301 #>  3 AA-1_0X005 Site               1           1      1 AA-1         201610 #>  4 AA-1_0X006 Site               1           1      1 AA-1         200708 #>  5 AA-1_0X006 Site               1           1      1 AA-1         200709 #>  6 AA-1_0X006 Site               2           1      2 AA-1         200710 #>  7 AA-1_0X006 Site               2           1      2 AA-1         200806 #>  8 AA-1_0X006 Site               2           1      2 AA-1         200904 #>  9 AA-1_0X006 Site               1           1      1 AA-1         201204 #> 10 AA-1_0X007 Site               1           0     NA AA-1         201108 #> # ℹ 18,935 more rows dfInputDays <- gsm.studykri::Input_CountSiteByMonth(       dfSubjects = lPortfolio$Raw_SUBJ,       dfNumerator = lPortfolio$Raw_AE,       dfDenominator = lPortfolio$Raw_SUBJ,       strStudyCol = \"studyid\",       strGroupCol = \"invid\",       strGroupLevel = \"Site\",       strSubjectCol = \"subjid\",       strNumeratorDateCol = \"aest_dt\",       strDenominatorDateCol = \"firstparticipantdate\",       strDenominatorEndDateCol = \"lastparticipantdate\"   ) %>%   tibble()  dfInputDays #> # A tibble: 23,307 × 7 #>    GroupID    GroupLevel Numerator Denominator Metric StudyID MonthYYYYMM #>    <chr>      <chr>          <int>       <int>  <dbl> <chr>         <dbl> #>  1 AA-1_0X004 Site               3          60 0.05   AA-1         200909 #>  2 AA-1_0X004 Site               1          31 0.0323 AA-1         201301 #>  3 AA-1_0X005 Site               1          31 0.0323 AA-1         201610 #>  4 AA-1_0X006 Site               1          22 0.0455 AA-1         200708 #>  5 AA-1_0X006 Site               1          30 0.0333 AA-1         200709 #>  6 AA-1_0X006 Site               2          31 0.0645 AA-1         200710 #>  7 AA-1_0X006 Site               2          30 0.0667 AA-1         200806 #>  8 AA-1_0X006 Site               2          30 0.0667 AA-1         200904 #>  9 AA-1_0X006 Site               1          30 0.0333 AA-1         201204 #> 10 AA-1_0X007 Site               1          31 0.0323 AA-1         201108 #> # ℹ 23,297 more rows dfTransformed <- gsm.studykri::Transform_CumCount(       dfInput,       nMinDenominator = 25,       vBy = c(\"StudyID\")   )  %>%   tibble()  dfTransformed #> # A tibble: 743 × 7 #>    StudyID MonthYYYYMM StudyMonth Numerator Denominator Metric GroupCount #>    <chr>         <dbl>      <int>     <int>       <int>  <dbl>      <int> #>  1 AA-1         200404          1         8          35  0.229         10 #>  2 AA-1         200405          2        12          49  0.245         13 #>  3 AA-1         200406          3        14          67  0.209         16 #>  4 AA-1         200407          4        16          90  0.178         21 #>  5 AA-1         200408          5        19         121  0.157         24 #>  6 AA-1         200409          6        28         148  0.189         22 #>  7 AA-1         200410          7        30         183  0.164         25 #>  8 AA-1         200411          8        31         213  0.146         24 #>  9 AA-1         200412          9        33         245  0.135         24 #> 10 AA-1         200501         10        40         282  0.142         26 #> # ℹ 733 more rows df_Analyzed_Bootstrap_Site <- dfInput %>%   gsm.studykri::Analyze_StudyKRI(nBootstrapReps = 1000) %>%   tibble()   df_Analyzed_Bootstrap_Site #> # A tibble: 18,967,794 × 8 #>    StudyID BootstrapRep GroupID    GroupLevel Numerator Denominator Metric #>    <chr>          <int> <chr>      <chr>          <int>       <int>  <dbl> #>  1 AA-1               1 AA-1_0X107 Site               1           1      1 #>  2 AA-1               1 AA-1_0X107 Site               1           1      1 #>  3 AA-1               1 AA-1_0X107 Site               2           1      2 #>  4 AA-1               1 AA-1_0X107 Site               1           1      1 #>  5 AA-1               1 AA-1_0X107 Site               0           1      0 #>  6 AA-1               1 AA-1_0X107 Site               0           1      0 #>  7 AA-1               1 AA-1_0X107 Site               0           2      0 #>  8 AA-1               1 AA-1_0X107 Site               0           1      0 #>  9 AA-1               1 AA-1_0X107 Site               0           1      0 #> 10 AA-1               1 AA-1_0X107 Site               0           2      0 #> # ℹ 18,967,784 more rows #> # ℹ 1 more variable: MonthYYYYMM <dbl> df_Analyzed_Bootstrap_Study <- df_Analyzed_Bootstrap_Site %>%   gsm.studykri::Transform_CumCount(       nMinDenominator = 25,       vBy = c(\"StudyID\", \"BootstrapRep\")   ) %>%   tibble()  df_Analyzed_Bootstrap_Study #> # A tibble: 739,600 × 8 #>    StudyID BootstrapRep MonthYYYYMM StudyMonth Numerator Denominator Metric #>    <chr>          <int>       <dbl>      <int>     <int>       <int>  <dbl> #>  1 AA-1               1      200403          1         7          30  0.233 #>  2 AA-1               1      200404          2        12          53  0.226 #>  3 AA-1               1      200405          3        22          78  0.282 #>  4 AA-1               1      200406          4        28         110  0.255 #>  5 AA-1               1      200407          5        33         144  0.229 #>  6 AA-1               1      200408          6        38         189  0.201 #>  7 AA-1               1      200409          7        47         232  0.203 #>  8 AA-1               1      200410          8        50         274  0.182 #>  9 AA-1               1      200411          9        51         312  0.163 #> 10 AA-1               1      200412         10        51         354  0.144 #> # ℹ 739,590 more rows #> # ℹ 1 more variable: GroupCount <int> df_Bounds <- gsm.studykri::Analyze_StudyKRI_PredictBounds(     df_Analyzed_Bootstrap_Study,     vBy = c(\"StudyID\"),     nConfLevel = 0.95   ) %>%   tibble()  df_Bounds #> # A tibble: 758 × 6 #>    StudyID StudyMonth MedianMetric LowerBound UpperBound BootstrapCount #>    <chr>        <int>        <dbl>      <dbl>      <dbl>          <int> #>  1 AA-1             1        0.222     0.0908      0.367           1000 #>  2 AA-1             2        0.222     0.0816      0.373           1000 #>  3 AA-1             3        0.206     0.0784      0.353           1000 #>  4 AA-1             4        0.184     0.0757      0.338           1000 #>  5 AA-1             5        0.175     0.0813      0.306           1000 #>  6 AA-1             6        0.174     0.0849      0.285           1000 #>  7 AA-1             7        0.163     0.0797      0.269           1000 #>  8 AA-1             8        0.152     0.0830      0.260           1000 #>  9 AA-1             9        0.143     0.0795      0.242           1000 #> 10 AA-1            10        0.142     0.0789      0.220           1000 #> # ℹ 748 more rows gsm.studykri::Visualize_StudyKRI(     dfStudyKRI = dfTransformed,     dfBounds = df_Bounds,     strStudyID = \"AA-4\"   ) df_Bounds_Ref <- dfInput %>%   gsm.studykri::Analyze_StudyKRI_PredictBoundsRefSet(       vStudyFilter = c(\"AA-1\", \"AA-2\", \"AA-3\"),       nBootstrapReps = 1000,       nConfLevel = 0.95,       nMinDenominator = 25   ) %>%   tibble() #> Resampling with minimum group count: 73  df_Bounds_Ref #> # A tibble: 190 × 7 #>    StudyMonth MedianMetric LowerBound UpperBound BootstrapCount GroupCount #>         <int>        <dbl>      <dbl>      <dbl>          <int>      <int> #>  1          1        0.158     0.0525      0.485           1000         73 #>  2          2        0.191     0.0755      0.508           1000         73 #>  3          3        0.283     0.0986      0.526           1000         73 #>  4          4        0.288     0.105       0.507           1000         73 #>  5          5        0.275     0.105       0.455           1000         73 #>  6          6        0.275     0.118       0.510           1000         73 #>  7          7        0.271     0.114       0.530           1000         73 #>  8          8        0.263     0.112       0.523           1000         73 #>  9          9        0.248     0.106       0.483           1000         73 #> 10         10        0.235     0.106       0.449           1000         73 #> # ℹ 180 more rows #> # ℹ 1 more variable: StudyCount <int> gsm.studykri::Visualize_StudyKRI(     dfTransformed,     df_Bounds_Ref,     df_Bounds,     strStudyID = \"AA-4\"   ) p1 <- gsm.studykri::Visualize_StudyKRI(     dfTransformed,     df_Bounds_Ref,     df_Bounds,     strStudyID = \"AA-1\"   )  p2 <- gsm.studykri::Visualize_StudyKRI(     dfTransformed,     df_Bounds_Ref,     df_Bounds,     strStudyID = \"AA-2\"   ) p3 <- gsm.studykri::Visualize_StudyKRI(     dfTransformed,     df_Bounds_Ref,     df_Bounds,     strStudyID = \"AA-3\"   ) library(patchwork)  p1 + p2 + p3 + patchwork::plot_layout(guides = \"collect\")"},{"path":"https://impala-consortium.github.io/gsm.studykri/articles/Cookbook.html","id":"calculate-kri-using-yaml-workflows","dir":"Articles","previous_headings":"","what":"Calculate KRI using yaml workflows","title":"Cookbook","text":"can also use {gsm}-style yaml workflow. start portfolio 6 studies 2 target studies whcih reports built, others serve reference.","code":"# Generate multi-study portfolio using SimulatePortfolio lRaw_original <- list(     Raw_SUBJ = clindata::rawplus_dm,     Raw_AE = clindata::rawplus_ae,     Raw_VISIT = clindata::rawplus_visdt,     Raw_SITE = clindata::ctms_site,     Raw_STUDY = clindata::ctms_study,     Raw_PD = clindata::ctms_protdev,     Raw_DATAENT = clindata::edc_data_pages,     Raw_QUERY = clindata::edc_queries,     Raw_ENROLL = clindata::rawplus_enroll,     Raw_Randomization = clindata::rawplus_ixrsrand,     Raw_LB = clindata::rawplus_lb,     Raw_SDRGCOMP = clindata::rawplus_sdrgcomp,     Raw_STUDCOMP = clindata::rawplus_studcomp )  # Create a portfolio with 3 studies lRaw <- SimulatePortfolio(     lRaw = lRaw_original,     nStudies = 3,     seed = 123,     dfConfig = tibble(       studyid = c(\"AA-1\", \"AA-2\", \"AA-3\", \"AA-4\", \"AA-5\", \"AA-6\"),       nSubjects = c(500, 750, 150, 200, 250, 300),       strOversamplDomain = rep(\"Raw_AE\", 6),       vOversamplQuantileRange_min = c(0, 0, 0, 0, 0, 0),       vOversamplQuantileRange_max = c(1, 0.75, 1, 1, 0.95, 0.9)   ) ) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 773 subjects with Raw_AE records in 0.00-0.75 quantile range (1-6 records) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 969 subjects with Raw_AE records in 0.00-0.95 quantile range (1-13 records) #> Filtered to 914 subjects with Raw_AE records in 0.00-0.90 quantile range (1-10 records)  lRaw$Raw_StudyRef <- tibble(    studyid = c(rep(\"AA-1\", 3), rep(\"AA-2\", 4)),    studyrefid = c(\"AA-3\", \"AA-4\", \"AA-5\", \"AA-3\", \"AA-4\", \"AA-5\", \"AA-6\") )  # Run mapping workflows mapping_wf <- gsm.core::MakeWorkflowList(     strNames = NULL,     strPath = system.file(\"workflow/1_mappings\", package = \"gsm.studykri\"),     strPackage = NULL )  lIngest <- gsm.mapping::Ingest(lRaw, gsm.mapping::CombineSpecs(mapping_wf)) #> ℹ Ingesting data for AE. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 6545 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for ENROLL. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1661 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for LB. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1457497 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for PD. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 27876 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for Randomization. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1661 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for SDRGCOMP. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 876 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for STUDCOMP. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 154 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for StudyRef. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 7 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for SUBJ. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1661 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for VISIT. #> Creating a new temporary DuckDB connection. #> Warning: Field `visit_dt`: 13 unparsable Date(s) set to NA #> ✔ SQL Query complete: 36113 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for DATAENT. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1484772 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for SUBJ. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1661 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for QUERY. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 253554 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for SITE. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 632 rows returned. #> Disconnected from temporary DuckDB connection. #> ℹ Ingesting data for STUDY. #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 6 rows returned. #> Disconnected from temporary DuckDB connection.   lMapped <- gsm.core::RunWorkflows(lWorkflows = mapping_wf, lData = lIngest) #>  #> ── Running 15 Workflows ──────────────────────────────────────────────────────── #>  #> ── Initializing `Mapped_AE` Workflow ─────────────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_AE #> → All specified columns in Raw_AE are in the expected format #> → All 7 specified column(s) in the spec are present in the data: Raw_AE$subjid, Raw_AE$aeser, Raw_AE$aest_dt, Raw_AE$aeen_dt, Raw_AE$mdrpt_nsv, Raw_AE$mdrsoc_nsv, Raw_AE$aetoxgr #>  #> ── Workflow Step 1 of 1: `=` ── #>  #> ── Evaluating 2 parameter(s) for `=` #> ℹ lhs = Mapped_AE: No matching data found. Passing 'Mapped_AE' as a string. #> ✔ rhs = Raw_AE: Passing lData$Raw_AE. #>  #> ── Calling `=` #>  #> ── 6545x7 data.frame saved as `lData$Mapped_AE`. #>  #> ── Returning results from final step: 6545x7 data.frame`. ── #>  #> ── Completed `Mapped_AE` Workflow ────────────────────────────────────────────── #>  #> ── Initializing `Mapped_ENROLL` Workflow ─────────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_ENROLL #> → All specified columns in Raw_ENROLL are in the expected format #> → All 6 specified column(s) in the spec are present in the data: Raw_ENROLL$studyid, Raw_ENROLL$invid, Raw_ENROLL$country, Raw_ENROLL$subjid, Raw_ENROLL$subjectid, Raw_ENROLL$enrollyn #>  #> ── Workflow Step 1 of 1: `=` ── #>  #> ── Evaluating 2 parameter(s) for `=` #> ℹ lhs = Mapped_ENROLL: No matching data found. Passing 'Mapped_ENROLL' as a string. #> ✔ rhs = Raw_ENROLL: Passing lData$Raw_ENROLL. #>  #> ── Calling `=` #>  #> ── 1661x6 data.frame saved as `lData$Mapped_ENROLL`. #>  #> ── Returning results from final step: 1661x6 data.frame`. ── #>  #> ── Completed `Mapped_ENROLL` Workflow ────────────────────────────────────────── #>  #> ── Initializing `Mapped_LB` Workflow ─────────────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_LB #> → All specified columns in Raw_LB are in the expected format #> → All 2 specified column(s) in the spec are present in the data: Raw_LB$subjid, Raw_LB$toxgrg_nsv #>  #> ── Workflow Step 1 of 1: `=` ── #>  #> ── Evaluating 2 parameter(s) for `=` #> ℹ lhs = Mapped_LB: No matching data found. Passing 'Mapped_LB' as a string. #> ✔ rhs = Raw_LB: Passing lData$Raw_LB. #>  #> ── Calling `=` #>  #> ── 1457497x2 data.frame saved as `lData$Mapped_LB`. #>  #> ── Returning results from final step: 1457497x2 data.frame`. ── #>  #> ── Completed `Mapped_LB` Workflow ────────────────────────────────────────────── #>  #> ── Initializing `Mapped_PD` Workflow ─────────────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_PD #> → All specified columns in Raw_PD are in the expected format #> → All 2 specified column(s) in the spec are present in the data: Raw_PD$subjid, Raw_PD$deemedimportant #>  #> ── Workflow Step 1 of 1: `=` ── #>  #> ── Evaluating 2 parameter(s) for `=` #> ℹ lhs = Mapped_PD: No matching data found. Passing 'Mapped_PD' as a string. #> ✔ rhs = Raw_PD: Passing lData$Raw_PD. #>  #> ── Calling `=` #>  #> ── 27876x2 data.frame saved as `lData$Mapped_PD`. #>  #> ── Returning results from final step: 27876x2 data.frame`. ── #>  #> ── Completed `Mapped_PD` Workflow ────────────────────────────────────────────── #>  #> ── Initializing `Mapped_Randomization` Workflow ──────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_Randomization #> → All specified columns in Raw_Randomization are in the expected format #> → All 6 specified column(s) in the spec are present in the data: Raw_Randomization$studyid, Raw_Randomization$invid, Raw_Randomization$subjid, Raw_Randomization$rand_dt, Raw_Randomization$status, Raw_Randomization$country #>  #> ── Workflow Step 1 of 1: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Raw_Randomization: Passing lData$Raw_Randomization. #> ℹ strQuery = SELECT  studyid, invid, subjid, rand_dt, status, country FROM df WHERE subjid IS NOT NULL AND (status != 'Screen Failed' OR status IS NULL): No matching data found. Passing 'SELECT  studyid, invid, subjid, rand_dt, status, country FROM df WHERE subjid IS NOT NULL AND (status != 'Screen Failed' OR status IS NULL)' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1661 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 1661x6 data.frame saved as `lData$Mapped_Randomization`. #>  #> ── Returning results from final step: 1661x6 data.frame`. ── #>  #> ── Completed `Mapped_Randomization` Workflow ─────────────────────────────────── #>  #> ── Initializing `Mapped_SDRGCOMP` Workflow ───────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_SDRGCOMP #> → All specified columns in Raw_SDRGCOMP are in the expected format #> → All 3 specified column(s) in the spec are present in the data: Raw_SDRGCOMP$subjid, Raw_SDRGCOMP$sdrgyn, Raw_SDRGCOMP$phase #>  #> ── Workflow Step 1 of 1: `=` ── #>  #> ── Evaluating 2 parameter(s) for `=` #> ℹ lhs = Mapped_SDRGCOMP: No matching data found. Passing 'Mapped_SDRGCOMP' as a string. #> ✔ rhs = Raw_SDRGCOMP: Passing lData$Raw_SDRGCOMP. #>  #> ── Calling `=` #>  #> ── 876x3 data.frame saved as `lData$Mapped_SDRGCOMP`. #>  #> ── Returning results from final step: 876x3 data.frame`. ── #>  #> ── Completed `Mapped_SDRGCOMP` Workflow ──────────────────────────────────────── #>  #> ── Initializing `Mapped_STUDCOMP` Workflow ───────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_STUDCOMP #> → All specified columns in Raw_STUDCOMP are in the expected format #> → All 3 specified column(s) in the spec are present in the data: Raw_STUDCOMP$subjid, Raw_STUDCOMP$compyn, Raw_STUDCOMP$compreas #>  #> ── Workflow Step 1 of 1: `=` ── #>  #> ── Evaluating 2 parameter(s) for `=` #> ℹ lhs = Mapped_STUDCOMP: No matching data found. Passing 'Mapped_STUDCOMP' as a string. #> ✔ rhs = Raw_STUDCOMP: Passing lData$Raw_STUDCOMP. #>  #> ── Calling `=` #>  #> ── 154x3 data.frame saved as `lData$Mapped_STUDCOMP`. #>  #> ── Returning results from final step: 154x3 data.frame`. ── #>  #> ── Completed `Mapped_STUDCOMP` Workflow ──────────────────────────────────────── #>  #> ── Initializing `Mapped_StudyRef` Workflow ───────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_StudyRef #> → All specified columns in Raw_StudyRef are in the expected format #> → All 2 specified column(s) in the spec are present in the data: Raw_StudyRef$studyid, Raw_StudyRef$studyrefid #>  #> ── Workflow Step 1 of 1: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Raw_StudyRef: Passing lData$Raw_StudyRef. #> ℹ strQuery = SELECT studyid AS study, studyrefid AS studyref FROM df: No matching data found. Passing 'SELECT studyid AS study, studyrefid AS studyref FROM df' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 7 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 7x2 data.frame saved as `lData$Mapped_StudyRef`. #>  #> ── Returning results from final step: 7x2 data.frame`. ── #>  #> ── Completed `Mapped_StudyRef` Workflow ──────────────────────────────────────── #>  #> ── Initializing `Mapped_SUBJ` Workflow ───────────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_SUBJ #> → All specified columns in Raw_SUBJ are in the expected format #> → All 14 specified column(s) in the spec are present in the data: Raw_SUBJ$studyid, Raw_SUBJ$invid, Raw_SUBJ$country, Raw_SUBJ$subjid, Raw_SUBJ$subject_nsv, Raw_SUBJ$enrollyn, Raw_SUBJ$timeonstudy, Raw_SUBJ$firstparticipantdate, Raw_SUBJ$lastparticipantdate, Raw_SUBJ$firstdosedate, Raw_SUBJ$timeontreatment, Raw_SUBJ$agerep, Raw_SUBJ$sex, Raw_SUBJ$race #>  #> ── Workflow Step 1 of 1: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Raw_SUBJ: Passing lData$Raw_SUBJ. #> ℹ strQuery = SELECT * FROM df WHERE enrollyn == 'Y': No matching data found. Passing 'SELECT * FROM df WHERE enrollyn == 'Y'' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 1661 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 1661x14 data.frame saved as `lData$Mapped_SUBJ`. #>  #> ── Returning results from final step: 1661x14 data.frame`. ── #>  #> ── Completed `Mapped_SUBJ` Workflow ──────────────────────────────────────────── #>  #> ── Initializing `Mapped_Visit` Workflow ──────────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Raw_VISIT #> → All specified columns in Raw_VISIT are in the expected format #> → All 4 specified column(s) in the spec are present in the data: Raw_VISIT$subjid, Raw_VISIT$visit_dt, Raw_VISIT$visit_folder, Raw_VISIT$invid #>  #> ── Workflow Step 1 of 1: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Raw_VISIT: Passing lData$Raw_VISIT. #> ℹ strQuery = SELECT subjid, visit_dt, visit_folder, invid FROM df: No matching data found. Passing 'SELECT subjid, visit_dt, visit_folder, invid FROM df' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 36113 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 36113x4 data.frame saved as `lData$Mapped_VISIT`. #>  #> ── Returning results from final step: 36113x4 data.frame`. ── #>  #> ── Completed `Mapped_Visit` Workflow ─────────────────────────────────────────── #>  #> ── Initializing `Mapped_DATAENT` Workflow ────────────────────────────────────── #>  #> ── Checking data against spec #> → All 2 data.frame(s) in the spec are present in the data: Raw_DATAENT, Mapped_SUBJ #> → All specified columns in Raw_DATAENT are in the expected format #> → All specified columns in Mapped_SUBJ are in the expected format #> → All 4 specified column(s) in the spec are present in the data: Raw_DATAENT$subject_nsv, Raw_DATAENT$data_entry_lag, Mapped_SUBJ$subjid, Mapped_SUBJ$subject_nsv #>  #> ── Workflow Step 1 of 2: `dplyr::select` ── #>  #> ── Evaluating 3 parameter(s) for `dplyr::select` #> ✔ .data = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ℹ subjid = subjid: No matching data found. Passing 'subjid' as a string. #> ℹ subject_nsv = subject_nsv: No matching data found. Passing 'subject_nsv' as a string. #>  #> ── Calling `dplyr::select` #>  #> ── 1661x2 data.frame saved as `lData$Temp_SubjectLookup`. #>  #> ── Workflow Step 2 of 2: `dplyr::left_join` ── #>  #> ── Evaluating 3 parameter(s) for `dplyr::left_join` #> ✔ x = Raw_DATAENT: Passing lData$Raw_DATAENT. #> ✔ y = Temp_SubjectLookup: Passing lData$Temp_SubjectLookup. #> ℹ by = subject_nsv: No matching data found. Passing 'subject_nsv' as a string. #>  #> ── Calling `dplyr::left_join` #>  #> ── 1484772x3 data.frame saved as `lData$Mapped_DATAENT`. #>  #> ── Returning results from final step: 1484772x3 data.frame`. ── #>  #> ── Completed `Mapped_DATAENT` Workflow ───────────────────────────────────────── #>  #> ── Initializing `Mapped_QUERY` Workflow ──────────────────────────────────────── #>  #> ── Checking data against spec #> → All 2 data.frame(s) in the spec are present in the data: Raw_QUERY, Mapped_SUBJ #> → All specified columns in Raw_QUERY are in the expected format #> → All specified columns in Mapped_SUBJ are in the expected format #> → All 5 specified column(s) in the spec are present in the data: Raw_QUERY$subject_nsv, Raw_QUERY$querystatus, Raw_QUERY$queryage, Mapped_SUBJ$subjid, Mapped_SUBJ$subject_nsv #>  #> ── Workflow Step 1 of 2: `dplyr::select` ── #>  #> ── Evaluating 3 parameter(s) for `dplyr::select` #> ✔ .data = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ℹ subjid = subjid: No matching data found. Passing 'subjid' as a string. #> ℹ subject_nsv = subject_nsv: No matching data found. Passing 'subject_nsv' as a string. #>  #> ── Calling `dplyr::select` #>  #> ── 1661x2 data.frame saved as `lData$Temp_SubjectLookup`. #>  #> ── Workflow Step 2 of 2: `dplyr::left_join` ── #>  #> ── Evaluating 3 parameter(s) for `dplyr::left_join` #> ✔ x = Raw_QUERY: Passing lData$Raw_QUERY. #> ✔ y = Temp_SubjectLookup: Passing lData$Temp_SubjectLookup. #> ℹ by = subject_nsv: No matching data found. Passing 'subject_nsv' as a string. #>  #> ── Calling `dplyr::left_join` #>  #> ── 253554x4 data.frame saved as `lData$Mapped_QUERY`. #>  #> ── Returning results from final step: 253554x4 data.frame`. ── #>  #> ── Completed `Mapped_QUERY` Workflow ─────────────────────────────────────────── #>  #> ── Initializing `Mapped_COUNTRY` Workflow ────────────────────────────────────── #>  #> ── Checking data against spec #> → All 1 data.frame(s) in the spec are present in the data: Mapped_SUBJ #> → All specified columns in Mapped_SUBJ are in the expected format #> → All 3 specified column(s) in the spec are present in the data: Mapped_SUBJ$country, Mapped_SUBJ$invid, Mapped_SUBJ$subjid #>  #> ── Workflow Step 1 of 2: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ℹ strQuery = SELECT country as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY country: No matching data found. Passing 'SELECT country as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY country' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 3 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 3x3 data.frame saved as `lData$Temp_CountryCountsWide`. #>  #> ── Workflow Step 2 of 2: `gsm.mapping::MakeLongMeta` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.mapping::MakeLongMeta` #> ✔ data = Temp_CountryCountsWide: Passing lData$Temp_CountryCountsWide. #> ℹ strGroupLevel = Country: No matching data found. Passing 'Country' as a string. #>  #> ── Calling `gsm.mapping::MakeLongMeta` #>  #> ── 6x4 data.frame saved as `lData$Mapped_COUNTRY`. #>  #> ── Returning results from final step: 6x4 data.frame`. ── #>  #> ── Completed `Mapped_COUNTRY` Workflow ───────────────────────────────────────── #>  #> ── Initializing `Mapped_SITE` Workflow ───────────────────────────────────────── #>  #> ── Checking data against spec #> → All 2 data.frame(s) in the spec are present in the data: Raw_SITE, Mapped_SUBJ #> → All specified columns in Raw_SITE are in the expected format #> → All specified columns in Mapped_SUBJ are in the expected format #> → All 11 specified column(s) in the spec are present in the data: Raw_SITE$studyid, Raw_SITE$invid, Raw_SITE$InvestigatorFirstName, Raw_SITE$InvestigatorLastName, Raw_SITE$site_status, Raw_SITE$City, Raw_SITE$State, Raw_SITE$Country, Mapped_SUBJ$studyid, Mapped_SUBJ$invid, Mapped_SUBJ$subjid #>  #> ── Workflow Step 1 of 5: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Raw_SITE: Passing lData$Raw_SITE. #> ℹ strQuery = SELECT invid as GroupID, * FROM df: No matching data found. Passing 'SELECT invid as GroupID, * FROM df' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 632 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 632x9 data.frame saved as `lData$Temp_CTMSSiteWide`. #>  #> ── Workflow Step 2 of 5: `gsm.mapping::MakeLongMeta` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.mapping::MakeLongMeta` #> ✔ data = Temp_CTMSSiteWide: Passing lData$Temp_CTMSSiteWide. #> ℹ strGroupLevel = Site: No matching data found. Passing 'Site' as a string. #>  #> ── Calling `gsm.mapping::MakeLongMeta` #>  #> ── 5056x4 data.frame saved as `lData$Temp_CTMSSite`. #>  #> ── Workflow Step 3 of 5: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ℹ strQuery = SELECT invid as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY invid: No matching data found. Passing 'SELECT invid as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY invid' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 591 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 591x3 data.frame saved as `lData$Temp_SiteCountsWide`. #>  #> ── Workflow Step 4 of 5: `gsm.mapping::MakeLongMeta` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.mapping::MakeLongMeta` #> ✔ data = Temp_SiteCountsWide: Passing lData$Temp_SiteCountsWide. #> ℹ strGroupLevel = Site: No matching data found. Passing 'Site' as a string. #>  #> ── Calling `gsm.mapping::MakeLongMeta` #>  #> ── 1182x4 data.frame saved as `lData$Temp_SiteCounts`. #>  #> ── Workflow Step 5 of 5: `dplyr::bind_rows` ── #>  #> ── Evaluating 2 parameter(s) for `dplyr::bind_rows` #> ✔ Temp_CTMSSite = Temp_CTMSSite: Passing lData$Temp_CTMSSite. #> ✔ Temp_SiteCounts = Temp_SiteCounts: Passing lData$Temp_SiteCounts. #>  #> ── Calling `dplyr::bind_rows` #>  #> ── 6238x4 data.frame saved as `lData$Mapped_SITE`. #>  #> ── Returning results from final step: 6238x4 data.frame`. ── #>  #> ── Completed `Mapped_SITE` Workflow ──────────────────────────────────────────── #>  #> ── Initializing `Mapped_STUDY` Workflow ──────────────────────────────────────── #>  #> ── Checking data against spec #> → All 2 data.frame(s) in the spec are present in the data: Raw_STUDY, Raw_SUBJ #> → All specified columns in Raw_STUDY are in the expected format #> → All specified columns in Raw_SUBJ are in the expected format #> → All 18 specified column(s) in the spec are present in the data: Raw_STUDY$studyid, Raw_STUDY$nickname, Raw_STUDY$protocol_title, Raw_STUDY$status, Raw_STUDY$num_plan_site, Raw_STUDY$num_plan_subj, Raw_STUDY$act_fpfv, Raw_STUDY$est_fpfv, Raw_STUDY$est_lplv, Raw_STUDY$est_lpfv, Raw_STUDY$therapeutic_area, Raw_STUDY$protocol_indication, Raw_STUDY$phase, Raw_STUDY$product, Raw_SUBJ$studyid, Raw_SUBJ$invid, Raw_SUBJ$subjid, Raw_SUBJ$enrollyn #>  #> ── Workflow Step 1 of 9: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Raw_STUDY: Passing lData$Raw_STUDY. #> ℹ strQuery = SELECT studyid as GroupID, * FROM df: No matching data found. Passing 'SELECT studyid as GroupID, * FROM df' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 6 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 6x15 data.frame saved as `lData$Temp_CTMSStudyWide`. #>  #> ── Workflow Step 2 of 9: `gsm.mapping::MakeLongMeta` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.mapping::MakeLongMeta` #> ✔ data = Temp_CTMSStudyWide: Passing lData$Temp_CTMSStudyWide. #> ℹ strGroupLevel = Study: No matching data found. Passing 'Study' as a string. #>  #> ── Calling `gsm.mapping::MakeLongMeta` #>  #> ── 84x4 data.frame saved as `lData$Temp_CTMSStudy`. #>  #> ── Workflow Step 3 of 9: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Raw_STUDY: Passing lData$Raw_STUDY. #> ℹ strQuery = SELECT studyid as GroupID, num_plan_site as SiteTarget, num_plan_subj as ParticipantTarget FROM df: No matching data found. Passing 'SELECT studyid as GroupID, num_plan_site as SiteTarget, num_plan_subj as ParticipantTarget FROM df' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 6 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 6x3 data.frame saved as `lData$Temp_CTMSplanned`. #>  #> ── Workflow Step 4 of 9: `gsm.core::RunQuery` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.core::RunQuery` #> ✔ df = Raw_SUBJ: Passing lData$Raw_SUBJ. #> ℹ strQuery = SELECT studyid as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df WHERE enrollyn == 'Y' GROUP BY studyid: No matching data found. Passing 'SELECT studyid as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df WHERE enrollyn == 'Y' GROUP BY studyid' as a string. #>  #> ── Calling `gsm.core::RunQuery` #> Creating a new temporary DuckDB connection. #> ✔ SQL Query complete: 6 rows returned. #> Disconnected from temporary DuckDB connection. #>  #> ── 6x3 data.frame saved as `lData$Temp_StudyCountsWide`. #>  #> ── Workflow Step 5 of 9: `dplyr::left_join` ── #>  #> ── Evaluating 3 parameter(s) for `dplyr::left_join` #> ✔ x = Temp_CTMSplanned: Passing lData$Temp_CTMSplanned. #> ✔ y = Temp_StudyCountsWide: Passing lData$Temp_StudyCountsWide. #> ℹ by = GroupID: No matching data found. Passing 'GroupID' as a string. #>  #> ── Calling `dplyr::left_join` #>  #> ── 6x5 data.frame saved as `lData$Temp_CountTargetsWide`. #>  #> ── Workflow Step 6 of 9: `gsm.mapping::CalculatePercentage` ── #>  #> ── Evaluating 5 parameter(s) for `gsm.mapping::CalculatePercentage` #> ✔ data = Temp_CountTargetsWide: Passing lData$Temp_CountTargetsWide. #> ℹ strCurrentCol = SiteCount: No matching data found. Passing 'SiteCount' as a string. #> ℹ strTargetCol = SiteTarget: No matching data found. Passing 'SiteTarget' as a string. #> ℹ strPercVal = PercentSitesActivated: No matching data found. Passing 'PercentSitesActivated' as a string. #> ℹ strPercStrVal = SiteActivation: No matching data found. Passing 'SiteActivation' as a string. #>  #> ── Calling `gsm.mapping::CalculatePercentage` #>  #> ── 6x7 data.frame saved as `lData$Temp_CountTargetsWide_addsite`. #>  #> ── Workflow Step 7 of 9: `gsm.mapping::CalculatePercentage` ── #>  #> ── Evaluating 5 parameter(s) for `gsm.mapping::CalculatePercentage` #> ✔ data = Temp_CountTargetsWide_addsite: Passing lData$Temp_CountTargetsWide_addsite. #> ℹ strCurrentCol = ParticipantCount: No matching data found. Passing 'ParticipantCount' as a string. #> ℹ strTargetCol = ParticipantTarget: No matching data found. Passing 'ParticipantTarget' as a string. #> ℹ strPercVal = PercentParticipantsEnrolled: No matching data found. Passing 'PercentParticipantsEnrolled' as a string. #> ℹ strPercStrVal = ParticipantEnrollment: No matching data found. Passing 'ParticipantEnrollment' as a string. #>  #> ── Calling `gsm.mapping::CalculatePercentage` #>  #> ── 6x9 data.frame saved as `lData$Temp_CountTargetsWide_addsitepts`. #>  #> ── Workflow Step 8 of 9: `gsm.mapping::MakeLongMeta` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.mapping::MakeLongMeta` #> ✔ data = Temp_CountTargetsWide_addsitepts: Passing lData$Temp_CountTargetsWide_addsitepts. #> ℹ strGroupLevel = Study: No matching data found. Passing 'Study' as a string. #>  #> ── Calling `gsm.mapping::MakeLongMeta` #>  #> ── 48x4 data.frame saved as `lData$Temp_CountTargetsPercs`. #>  #> ── Workflow Step 9 of 9: `dplyr::bind_rows` ── #>  #> ── Evaluating 2 parameter(s) for `dplyr::bind_rows` #> ✔ Temp_CTMSStudy = Temp_CTMSStudy: Passing lData$Temp_CTMSStudy. #> ✔ Temp_CountTargetsPercs = Temp_CountTargetsPercs: Passing lData$Temp_CountTargetsPercs. #>  #> ── Calling `dplyr::bind_rows` #>  #> ── 132x4 data.frame saved as `lData$Mapped_STUDY`. #>  #> ── Returning results from final step: 132x4 data.frame`. ── #>  #> ── Completed `Mapped_STUDY` Workflow ───────────────────────────────────────────   # Run KRI workflow metrics_wf <- gsm.core::MakeWorkflowList(     strNames = NULL,     strPath = system.file(\"workflow/2_metrics\", package = \"gsm.studykri\"),     strPackage = NULL )  # Combine lMapped with metrics workflows for comprehensive result lAnalyzed <- gsm.core::RunWorkflows(lWorkflows = metrics_wf, lData = lMapped) #>  #> ── Running 2 Workflows ───────────────────────────────────────────────────────── #>  #> ── Initializing `Analysis_kri0001` Workflow ──────────────────────────────────── #>  #> ── Checking data against spec #> → All 3 data.frame(s) in the spec are present in the data: Mapped_AE, Mapped_SUBJ, Mapped_Visit #> → All specified columns in Mapped_AE are in the expected format #> → All specified columns in Mapped_SUBJ are in the expected format #> → All specified columns in Mapped_Visit are in the expected format #> → All 7 specified column(s) in the spec are present in the data: Mapped_AE$subjid, Mapped_AE$aest_dt, Mapped_SUBJ$subjid, Mapped_SUBJ$invid, Mapped_SUBJ$studyid, Mapped_Visit$subjid, Mapped_Visit$visit_dt #>  #> ── Workflow Step 1 of 7: `gsm.studykri::Input_CountSiteByMonth` ── #>  #> ── Evaluating 9 parameter(s) for `gsm.studykri::Input_CountSiteByMonth` #> ✔ dfSubjects = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ✔ dfNumerator = Mapped_AE: Passing lData$Mapped_AE. #> ✔ dfDenominator = Mapped_Visit: Passing lData$Mapped_Visit. #> ℹ strStudyCol = studyid: No matching data found. Passing 'studyid' as a string. #> ℹ strGroupCol = invid: No matching data found. Passing 'invid' as a string. #> ✔ strGroupLevel = GroupLevel: Passing lMeta$GroupLevel. #> ℹ strSubjectCol = subjid: No matching data found. Passing 'subjid' as a string. #> ℹ strNumeratorDateCol = aest_dt: No matching data found. Passing 'aest_dt' as a string. #> ℹ strDenominatorDateCol = visit_dt: No matching data found. Passing 'visit_dt' as a string. #>  #> ── Calling `gsm.studykri::Input_CountSiteByMonth` #>  #> ── 26212x7 data.frame saved as `lData$Analysis_Input`. #>  #> ── Workflow Step 2 of 7: `gsm.studykri::Transform_CumCount` ── #>  #> ── Evaluating 3 parameter(s) for `gsm.studykri::Transform_CumCount` #> ✔ dfInput = Analysis_Input: Passing lData$Analysis_Input. #> ℹ vBy = StudyID: No matching data found. Passing 'StudyID' as a string. #> ✔ nMinDenominator = AccrualThreshold: Passing lMeta$AccrualThreshold. #>  #> ── Calling `gsm.studykri::Transform_CumCount` #>  #> ── 1110x7 data.frame saved as `lData$Analysis_Transformed`. #>  #> ── Workflow Step 3 of 7: `gsm.studykri::Analyze_StudyKRI` ── #>  #> ── Evaluating 3 parameter(s) for `gsm.studykri::Analyze_StudyKRI` #> ✔ dfInput = Analysis_Input: Passing lData$Analysis_Input. #> ✔ nBootstrapReps = BootstrapReps: Passing lMeta$BootstrapReps. #> ℹ seed = 42: No matching data found. Passing '42' as a string. #>  #> ── Calling `gsm.studykri::Analyze_StudyKRI` #>  #> ── 26214557x8 data.frame saved as `lData$Analysis_Bootstrapped`. #>  #> ── Workflow Step 4 of 7: `gsm.studykri::Transform_CumCount` ── #>  #> ── Evaluating 3 parameter(s) for `gsm.studykri::Transform_CumCount` #> ✔ dfInput = Analysis_Bootstrapped: Passing lData$Analysis_Bootstrapped. #> ℹ vBy is of length 2: Parameter is a vector. Passing as is. #> ✔ nMinDenominator = AccrualThreshold: Passing lMeta$AccrualThreshold. #>  #> ── Calling `gsm.studykri::Transform_CumCount` #>  #> ── 1106889x8 data.frame saved as `lData$Analysis_BootstrappedStudy`. #>  #> ── Workflow Step 5 of 7: `gsm.studykri::Analyze_StudyKRI_PredictBounds` ── #>  #> ── Evaluating 3 parameter(s) for `gsm.studykri::Analyze_StudyKRI_PredictBounds` #> ✔ dfInput = Analysis_BootstrappedStudy: Passing lData$Analysis_BootstrappedStudy. #> ℹ vBy = StudyID: No matching data found. Passing 'StudyID' as a string. #> ✔ nConfLevel = Threshold: Passing lMeta$Threshold. #>  #> ── Calling `gsm.studykri::Analyze_StudyKRI_PredictBounds` #>  #> ── 1127x6 data.frame saved as `lData$Analysis_Bounds`. #>  #> ── Workflow Step 6 of 7: `gsm.studykri::Analyze_StudyKRI_PredictBoundsRef` ── #>  #> ── Evaluating 6 parameter(s) for `gsm.studykri::Analyze_StudyKRI_PredictBoundsRef` #> ✔ dfInput = Analysis_Input: Passing lData$Analysis_Input. #> ✔ dfStudyRef = Mapped_StudyRef: Passing lData$Mapped_StudyRef. #> ✔ nBootstrapReps = BootstrapReps: Passing lMeta$BootstrapReps. #> ✔ nConfLevel = Threshold: Passing lMeta$Threshold. #> ✔ nMinDenominator = AccrualThreshold: Passing lMeta$AccrualThreshold. #> ℹ seed = 42: No matching data found. Passing '42' as a string. #>  #> ── Calling `gsm.studykri::Analyze_StudyKRI_PredictBoundsRef` #> Resampling with minimum group count: 69 #> Resampling with minimum group count: 69 #>  #> ── 378x9 data.frame saved as `lData$Analysis_BoundsRef`. #>  #> ── Workflow Step 7 of 7: `list` ── #>  #> ── Evaluating 7 parameter(s) for `list` #> ✔ ID = ID: Passing lMeta$ID. #> ✔ Analysis_Input = Analysis_Input: Passing lData$Analysis_Input. #> ✔ Analysis_Transformed = Analysis_Transformed: Passing lData$Analysis_Transformed. #> ✔ Analysis_Bootstrapped = Analysis_Bootstrapped: Passing lData$Analysis_Bootstrapped. #> ✔ Analysis_BootstrappedStudy = Analysis_BootstrappedStudy: Passing lData$Analysis_BootstrappedStudy. #> ✔ Analysis_Bounds = Analysis_Bounds: Passing lData$Analysis_Bounds. #> ✔ Analysis_BoundsRef = Analysis_BoundsRef: Passing lData$Analysis_BoundsRef. #>  #> ── Calling `list` #>  #> ── list of length 7 saved as `lData$lAnalysis`. #>  #> ── Returning results from final step: list of length 7`. ── #>  #> ── Completed `Analysis_kri0001` Workflow ─────────────────────────────────────── #>  #> ── Initializing `Analysis_kri0002` Workflow ──────────────────────────────────── #>  #> ── Checking data against spec #> → All 2 data.frame(s) in the spec are present in the data: Mapped_AE, Mapped_SUBJ #> → All specified columns in Mapped_AE are in the expected format #> → All specified columns in Mapped_SUBJ are in the expected format #> → All 7 specified column(s) in the spec are present in the data: Mapped_AE$subjid, Mapped_AE$aest_dt, Mapped_SUBJ$subjid, Mapped_SUBJ$invid, Mapped_SUBJ$studyid, Mapped_SUBJ$firstparticipantdate, Mapped_SUBJ$lastparticipantdate #>  #> ── Workflow Step 1 of 7: `gsm.studykri::Input_CountSiteByMonth` ── #>  #> ── Evaluating 10 parameter(s) for `gsm.studykri::Input_CountSiteByMonth` #> ✔ dfSubjects = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ✔ dfNumerator = Mapped_AE: Passing lData$Mapped_AE. #> ✔ dfDenominator = Mapped_SUBJ: Passing lData$Mapped_SUBJ. #> ℹ strStudyCol = studyid: No matching data found. Passing 'studyid' as a string. #> ℹ strGroupCol = invid: No matching data found. Passing 'invid' as a string. #> ✔ strGroupLevel = GroupLevel: Passing lMeta$GroupLevel. #> ℹ strSubjectCol = subjid: No matching data found. Passing 'subjid' as a string. #> ℹ strNumeratorDateCol = aest_dt: No matching data found. Passing 'aest_dt' as a string. #> ℹ strDenominatorDateCol = firstparticipantdate: No matching data found. Passing 'firstparticipantdate' as a string. #> ℹ strDenominatorEndDateCol = lastparticipantdate: No matching data found. Passing 'lastparticipantdate' as a string. #>  #> ── Calling `gsm.studykri::Input_CountSiteByMonth` #>  #> ── 32433x7 data.frame saved as `lData$Analysis_Input`. #>  #> ── Workflow Step 2 of 7: `gsm.studykri::Transform_CumCount` ── #>  #> ── Evaluating 3 parameter(s) for `gsm.studykri::Transform_CumCount` #> ✔ dfInput = Analysis_Input: Passing lData$Analysis_Input. #> ℹ vBy = StudyID: No matching data found. Passing 'StudyID' as a string. #> ✔ nMinDenominator = AccrualThreshold: Passing lMeta$AccrualThreshold. #>  #> ── Calling `gsm.studykri::Transform_CumCount` #>  #> ── 1124x7 data.frame saved as `lData$Analysis_Transformed`. #>  #> ── Workflow Step 3 of 7: `gsm.studykri::Analyze_StudyKRI` ── #>  #> ── Evaluating 3 parameter(s) for `gsm.studykri::Analyze_StudyKRI` #> ✔ dfInput = Analysis_Input: Passing lData$Analysis_Input. #> ✔ nBootstrapReps = BootstrapReps: Passing lMeta$BootstrapReps. #> ℹ seed = 42: No matching data found. Passing '42' as a string. #>  #> ── Calling `gsm.studykri::Analyze_StudyKRI` #>  #> ── 32432932x8 data.frame saved as `lData$Analysis_Bootstrapped`. #>  #> ── Workflow Step 4 of 7: `gsm.studykri::Transform_CumCount` ── #>  #> ── Evaluating 3 parameter(s) for `gsm.studykri::Transform_CumCount` #> ✔ dfInput = Analysis_Bootstrapped: Passing lData$Analysis_Bootstrapped. #> ℹ vBy is of length 2: Parameter is a vector. Passing as is. #> ✔ nMinDenominator = AccrualThreshold: Passing lMeta$AccrualThreshold. #>  #> ── Calling `gsm.studykri::Transform_CumCount` #>  #> ── 1122028x8 data.frame saved as `lData$Analysis_BootstrappedStudy`. #>  #> ── Workflow Step 5 of 7: `gsm.studykri::Analyze_StudyKRI_PredictBounds` ── #>  #> ── Evaluating 3 parameter(s) for `gsm.studykri::Analyze_StudyKRI_PredictBounds` #> ✔ dfInput = Analysis_BootstrappedStudy: Passing lData$Analysis_BootstrappedStudy. #> ℹ vBy = StudyID: No matching data found. Passing 'StudyID' as a string. #> ✔ nConfLevel = Threshold: Passing lMeta$Threshold. #>  #> ── Calling `gsm.studykri::Analyze_StudyKRI_PredictBounds` #>  #> ── 1139x6 data.frame saved as `lData$Analysis_Bounds`. #>  #> ── Workflow Step 6 of 7: `gsm.studykri::Analyze_StudyKRI_PredictBoundsRef` ── #>  #> ── Evaluating 6 parameter(s) for `gsm.studykri::Analyze_StudyKRI_PredictBoundsRef` #> ✔ dfInput = Analysis_Input: Passing lData$Analysis_Input. #> ✔ dfStudyRef = Mapped_StudyRef: Passing lData$Mapped_StudyRef. #> ✔ nBootstrapReps = BootstrapReps: Passing lMeta$BootstrapReps. #> ✔ nConfLevel = Threshold: Passing lMeta$Threshold. #> ✔ nMinDenominator = AccrualThreshold: Passing lMeta$AccrualThreshold. #> ℹ seed = 42: No matching data found. Passing '42' as a string. #>  #> ── Calling `gsm.studykri::Analyze_StudyKRI_PredictBoundsRef` #> Resampling with minimum group count: 69 #> Resampling with minimum group count: 69 #>  #> ── 380x9 data.frame saved as `lData$Analysis_BoundsRef`. #>  #> ── Workflow Step 7 of 7: `list` ── #>  #> ── Evaluating 7 parameter(s) for `list` #> ✔ ID = ID: Passing lMeta$ID. #> ✔ Analysis_Input = Analysis_Input: Passing lData$Analysis_Input. #> ✔ Analysis_Transformed = Analysis_Transformed: Passing lData$Analysis_Transformed. #> ✔ Analysis_Bootstrapped = Analysis_Bootstrapped: Passing lData$Analysis_Bootstrapped. #> ✔ Analysis_BootstrappedStudy = Analysis_BootstrappedStudy: Passing lData$Analysis_BootstrappedStudy. #> ✔ Analysis_Bounds = Analysis_Bounds: Passing lData$Analysis_Bounds. #> ✔ Analysis_BoundsRef = Analysis_BoundsRef: Passing lData$Analysis_BoundsRef. #>  #> ── Calling `list` #>  #> ── list of length 7 saved as `lData$lAnalysis`. #>  #> ── Returning results from final step: list of length 7`. ── #>  #> ── Completed `Analysis_kri0002` Workflow ───────────────────────────────────────"},{"path":"https://impala-consortium.github.io/gsm.studykri/articles/Cookbook.html","id":"generate-kri-report-using-scripts","dir":"Articles","previous_headings":"","what":"Generate KRI report using scripts","title":"Cookbook","text":"subsequently generate KRI report using {gsm.reporting}.","code":"dfResults <- gsm.reporting::BindResults(lAnalyzed, \"Analysis_Transformed\")  dfBounds <- gsm.reporting::BindResults(lAnalyzed, \"Analysis_Bounds\")  dfBoundsRef <- gsm.reporting::BindResults(lAnalyzed, \"Analysis_BoundsRef\")  dfMetrics <- gsm.reporting::MakeMetric(metrics_wf)  dfGroups <- dplyr::bind_rows(   lMapped$Mapped_STUDY,   lMapped$Mapped_SITE,   lMapped$Country )  lCharts <- gsm.studykri::MakeCharts_StudyKRI(dfResults, dfBounds, dfBoundsRef, dfMetrics)  gsm.studykri::Report_KRI_StudyKRI(   lCharts = lCharts,   dfResults = dfResults,   dfGroups = dfGroups,   dfMetrics = dfMetrics,   strOutputFile = \"report_studykri.html\",   strInputPath = system.file(\"report\", \"Report_KRI.Rmd\", package = \"gsm.studykri\") ) #> processing file: Report_KRI.Rmd #> output file: /tmp/RtmpHsV4SI/Report_KRI.knit.md #> /opt/hostedtoolcache/pandoc/3.1.11/x64/pandoc +RTS -K512m -RTS /tmp/RtmpHsV4SI/Report_KRI.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /home/runner/work/gsm.studykri/gsm.studykri/vignettes/report_studykri_AA-1.html --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --table-of-contents --toc-depth 3 --variable toc_float=1 --variable toc_selectors=h1,h2,h3 --variable toc_collapsed=1 --variable toc_smooth_scroll=1 --variable toc_print=1 --template /home/runner/work/_temp/Library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=flatly --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/RtmpHsV4SI/rmarkdown-str20e842447721.html --variable code_folding=hide --variable code_menu=1 #>  #> Output created: report_studykri_AA-1.html #> processing file: Report_KRI.Rmd #> output file: /tmp/RtmpHsV4SI/Report_KRI.knit.md #> /opt/hostedtoolcache/pandoc/3.1.11/x64/pandoc +RTS -K512m -RTS /tmp/RtmpHsV4SI/Report_KRI.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /home/runner/work/gsm.studykri/gsm.studykri/vignettes/report_studykri_AA-2.html --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --table-of-contents --toc-depth 3 --variable toc_float=1 --variable toc_selectors=h1,h2,h3 --variable toc_collapsed=1 --variable toc_smooth_scroll=1 --variable toc_print=1 --template /home/runner/work/_temp/Library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=flatly --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/RtmpHsV4SI/rmarkdown-str20e8602f3775.html --variable code_folding=hide --variable code_menu=1 #>  #> Output created: report_studykri_AA-2.html #>                        AA-1                        AA-2  #> \"report_studykri_AA-1.html\" \"report_studykri_AA-2.html\""},{"path":"https://impala-consortium.github.io/gsm.studykri/articles/Cookbook.html","id":"generate-kri-report-using-yaml-workflows","dir":"Articles","previous_headings":"","what":"Generate KRI report using yaml workflows","title":"Cookbook","text":"","code":"reporting_wf <- gsm.core::MakeWorkflowList(     strPath = system.file(\"workflow/3_reporting\", package = \"gsm.studykri\") )  # Pass both lMapped and lAnalyzed, plus workflows lReporting <- gsm.core::RunWorkflows(     lWorkflows = reporting_wf,     lData = c(         lMapped,         list(         lAnalyzed = lAnalyzed,         lWorkflows = metrics_wf         )     ) ) #>  #> ── Running 5 Workflows ───────────────────────────────────────────────────────── #>  #> ── Initializing `Reporting_Bounds` Workflow ──────────────────────────────────── #>  #> ── No spec found in workflow. Proceeding without checking data. #>  #> ── Workflow Step 1 of 1: `gsm.reporting::BindResults` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.reporting::BindResults` #> ✔ lAnalysis = lAnalyzed: Passing lData$lAnalyzed. #> ℹ strName = Analysis_Bounds: No matching data found. Passing 'Analysis_Bounds' as a string. #>  #> ── Calling `gsm.reporting::BindResults` #>  #> ── 2266x8 data.frame saved as `lData$lBounds`. #>  #> ── Returning results from final step: 2266x8 data.frame`. ── #>  #> ── Completed `Reporting_Bounds` Workflow ─────────────────────────────────────── #>  #> ── Initializing `Reporting_BoundsRef` Workflow ───────────────────────────────── #>  #> ── No spec found in workflow. Proceeding without checking data. #>  #> ── Workflow Step 1 of 1: `gsm.reporting::BindResults` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.reporting::BindResults` #> ✔ lAnalysis = lAnalyzed: Passing lData$lAnalyzed. #> ℹ strName = Analysis_BoundsRef: No matching data found. Passing 'Analysis_BoundsRef' as a string. #>  #> ── Calling `gsm.reporting::BindResults` #>  #> ── 758x11 data.frame saved as `lData$lBoundsRef`. #>  #> ── Returning results from final step: 758x11 data.frame`. ── #>  #> ── Completed `Reporting_BoundsRef` Workflow ──────────────────────────────────── #>  #> ── Initializing `Reporting_Groups` Workflow ──────────────────────────────────── #>  #> ── No spec found in workflow. Proceeding without checking data. #>  #> ── Workflow Step 1 of 1: `dplyr::bind_rows` ── #>  #> ── Evaluating 1 parameter(s) for `dplyr::bind_rows` #> ℹ .list is of length 3: Parameter is a vector. Passing as is. #>  #> ── Calling `dplyr::bind_rows` #>  #> ── 3x1 data.frame saved as `lData$dfGroups`. #>  #> ── Returning results from final step: 3x1 data.frame`. ── #>  #> ── Completed `Reporting_Groups` Workflow ─────────────────────────────────────── #>  #> ── Initializing `Reporting_Metrics` Workflow ─────────────────────────────────── #>  #> ── No spec found in workflow. Proceeding without checking data. #>  #> ── Workflow Step 1 of 1: `gsm.reporting::MakeMetric` ── #>  #> ── Evaluating 1 parameter(s) for `gsm.reporting::MakeMetric` #> ✔ lWorkflows = lWorkflows: Passing lData$lWorkflows. #>  #> ── Calling `gsm.reporting::MakeMetric` #>  #> ── 2x16 data.frame saved as `lData$dfMetrics`. #>  #> ── Returning results from final step: 2x16 data.frame`. ── #>  #> ── Completed `Reporting_Metrics` Workflow ────────────────────────────────────── #>  #> ── Initializing `Reporting_Results` Workflow ─────────────────────────────────── #>  #> ── No spec found in workflow. Proceeding without checking data. #>  #> ── Workflow Step 1 of 1: `gsm.reporting::BindResults` ── #>  #> ── Evaluating 2 parameter(s) for `gsm.reporting::BindResults` #> ✔ lAnalysis = lAnalyzed: Passing lData$lAnalyzed. #> ℹ strName = Analysis_Transformed: No matching data found. Passing 'Analysis_Transformed' as a string. #>  #> ── Calling `gsm.reporting::BindResults` #>  #> ── 2234x9 data.frame saved as `lData$lResults`. #>  #> ── Returning results from final step: 2234x9 data.frame`. ── #>  #> ── Completed `Reporting_Results` Workflow ──────────────────────────────────────  module_wf_gsm <- gsm.core::MakeWorkflowList(   strNames = NULL,   strPath = system.file(\"workflow/4_modules\", package = \"gsm.studykri\"),   strPackage = NULL )  # we cannot set a dynamic link to the report path in the yaml files report_path <- system.file(\"report\", \"Report_KRI.Rmd\", package = \"gsm.studykri\") n_steps <- length(module_wf_gsm$StudyKRI$steps)  module_wf_gsm$StudyKRI$steps[[n_steps]]$params$strInputPath <- report_path  lModule <- gsm.core::RunWorkflows(module_wf_gsm, lReporting) #>  #> ── Running 1 Workflows ───────────────────────────────────────────────────────── #>  #> ── Initializing `Module_StudyKRI` Workflow ───────────────────────────────────── #>  #> ── No spec found in workflow. Proceeding without checking data. #>  #> ── Workflow Step 1 of 2: `gsm.studykri::MakeCharts_StudyKRI` ── #>  #> ── Evaluating 5 parameter(s) for `gsm.studykri::MakeCharts_StudyKRI` #> ✔ dfResults = Reporting_Results: Passing lData$Reporting_Results. #> ✔ dfBounds = Reporting_Bounds: Passing lData$Reporting_Bounds. #> ✔ dfBoundsRef = Reporting_BoundsRef: Passing lData$Reporting_BoundsRef. #> ✔ dfMetrics = Reporting_Metrics: Passing lData$Reporting_Metrics. #> ℹ nMaxMonth is of length 0: Parameter is a vector. Passing as is. #>  #> ── Calling `gsm.studykri::MakeCharts_StudyKRI` #>  #> ── list of length 4 saved as `lData$lCharts`. #>  #> ── Workflow Step 2 of 2: `gsm.studykri::Report_KRI_StudyKRI` ── #>  #> ── Evaluating 6 parameter(s) for `gsm.studykri::Report_KRI_StudyKRI` #> ✔ lCharts = lCharts: Passing lData$lCharts. #> ✔ dfResults = Reporting_Results: Passing lData$Reporting_Results. #> ✔ dfGroups = Reporting_Groups: Passing lData$Reporting_Groups. #> ✔ dfMetrics = Reporting_Metrics: Passing lData$Reporting_Metrics. #> ℹ strOutputFile = report_studykri.html: No matching data found. Passing 'report_studykri.html' as a string. #> ℹ strInputPath = /home/runner/work/_temp/Library/gsm.studykri/report/Report_KRI.Rmd: No matching data found. Passing '/home/runner/work/_temp/Library/gsm.studykri/report/Report_KRI.Rmd' as a string. #>  #> ── Calling `gsm.studykri::Report_KRI_StudyKRI` #> processing file: Report_KRI.Rmd #> output file: /tmp/RtmpHsV4SI/Report_KRI.knit.md #> /opt/hostedtoolcache/pandoc/3.1.11/x64/pandoc +RTS -K512m -RTS /tmp/RtmpHsV4SI/Report_KRI.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /home/runner/work/gsm.studykri/gsm.studykri/vignettes/report_studykri_AA-1.html --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --table-of-contents --toc-depth 3 --variable toc_float=1 --variable toc_selectors=h1,h2,h3 --variable toc_collapsed=1 --variable toc_smooth_scroll=1 --variable toc_print=1 --template /home/runner/work/_temp/Library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=flatly --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/RtmpHsV4SI/rmarkdown-str20e865657e5a.html --variable code_folding=hide --variable code_menu=1 #>  #> Output created: report_studykri_AA-1.html #> processing file: Report_KRI.Rmd #> output file: /tmp/RtmpHsV4SI/Report_KRI.knit.md #> /opt/hostedtoolcache/pandoc/3.1.11/x64/pandoc +RTS -K512m -RTS /tmp/RtmpHsV4SI/Report_KRI.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /home/runner/work/gsm.studykri/gsm.studykri/vignettes/report_studykri_AA-2.html --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --table-of-contents --toc-depth 3 --variable toc_float=1 --variable toc_selectors=h1,h2,h3 --variable toc_collapsed=1 --variable toc_smooth_scroll=1 --variable toc_print=1 --template /home/runner/work/_temp/Library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=flatly --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/RtmpHsV4SI/rmarkdown-str20e82e2434e3.html --variable code_folding=hide --variable code_menu=1 #>  #> Output created: report_studykri_AA-2.html #>  #> ── character of length 2 saved as `lData$strReportPath`. #>  #> ── Returning results from final step: character of length 2`. ── #>  #> ── Completed `Module_StudyKRI` Workflow ────────────────────────────────────────"},{"path":"https://impala-consortium.github.io/gsm.studykri/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). gsm.studykri: Package (One Line, Title Case). R package version 0.0.0.9000, https://impala-consortium.github.io/gsm.studykri/.","code":"@Manual{,   title = {gsm.studykri: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://impala-consortium.github.io/gsm.studykri/}, }"},{"path":[]},{"path":"https://impala-consortium.github.io/gsm.studykri/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"What the Package Does (One Line, Title Case)","text":"{gsm.studykri} provides new approach calculating KRI lower upper limits study-level quality monitoring clinical trials. method uses bootstrapping calculate confidence intervals given study -time. confidence intervals can used compare study-level KRI fixed expectation confidence intervals KRI values time one reference studies. bootstrapping method resamples new set sites replacement original study data set.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"","code":"install.packages(\"pak\") pak::pak(\"Gilead-BioStats/clindata\") pak::pak(\"Gilead-BioStats/gsm.core\") pak::pak(\"Gilead-BioStats/gsm.mapping\") pak::pak(\"Gilead-BioStats/gsm.kri\") pak::pak(\"Gilead-BioStats/gsm.reporting\") pak::pak(\"IMPALA-Consortium/gsm.studykri\")"},{"path":"https://impala-consortium.github.io/gsm.studykri/index.html","id":"example-days-on-study","dir":"","previous_headings":"","what":"Example: Days on Study","title":"What the Package Does (One Line, Title Case)","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(gsm.core) library(gsm.kri) library(gsm.studykri)  # Load raw data from clindata package lRaw <- list(   Raw_AE = clindata::rawplus_ae,   Raw_SUBJ = clindata::rawplus_dm )  # Simulate portfolio with 4 studies, AA-4 oversampled for low AE counts lPortfolio <- SimulatePortfolio(   lRaw = lRaw,   nStudies = 4,   dfConfig = tibble(     studyid = c(\"AA-1\", \"AA-2\", \"AA-3\", \"AA-4\"),     nSubjects = c(500, 750, 150, 200),     strOversamplDomain = rep(\"Raw_AE\", 4),     vOversamplQuantileRange_min = c(0, 0, 0, 0),     vOversamplQuantileRange_max = c(1, 1, 1, 0.75)   ) ) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 1016 subjects with Raw_AE records in 0.00-1.00 quantile range (1-31 records) #> Filtered to 773 subjects with Raw_AE records in 0.00-0.75 quantile range (1-6 records)  # Calculate site-level counts by month using days on study as denominator # Pass subjects as denominator with start and end dates to calculate person-days dfInputDays <- Input_CountSiteByMonth(   dfSubjects = lPortfolio$Raw_SUBJ,   dfNumerator = lPortfolio$Raw_AE,   dfDenominator = lPortfolio$Raw_SUBJ,   strStudyCol = \"studyid\",   strGroupCol = \"invid\",   strGroupLevel = \"Site\",   strSubjectCol = \"subjid\",   strNumeratorDateCol = \"aest_dt\",   strDenominatorDateCol = \"firstparticipantdate\",   strDenominatorEndDateCol = \"lastparticipantdate\" ) %>% tibble()  # Aggregate to study-level cumulative KRI by month dfTransformed <- Transform_CumCount(   dfInputDays,   nMinDenominator = 25,   vBy = c(\"StudyID\") ) %>% tibble()  # Generate bootstrap resamples at site-level (1000 iterations) df_Analyzed_Bootstrap_Site <- dfInputDays %>%   Analyze_StudyKRI(nBootstrapReps = 1000) %>%   tibble()  # Aggregate each bootstrap iteration to study-level df_Analyzed_Bootstrap_Study <- df_Analyzed_Bootstrap_Site %>%   Transform_CumCount(     nMinDenominator = 25,     vBy = c(\"StudyID\", \"BootstrapRep\")   ) %>% tibble()  # Calculate 95% confidence intervals from bootstrap distribution df_Bounds <- Analyze_StudyKRI_PredictBounds(   df_Analyzed_Bootstrap_Study,   vBy = c(\"StudyID\"),   nConfLevel = 0.95 ) %>% tibble()  # Calculate reference portfolio bounds from studies AA-1, AA-2, AA-3 # Reference bounds equalize site counts across studies for fair comparison df_Bounds_Ref <- dfInputDays %>%   Analyze_StudyKRI_PredictBoundsRefSet(     vStudyFilter = c(\"AA-1\", \"AA-2\", \"AA-3\"),     nBootstrapReps = 1000,     nConfLevel = 0.95,     nMinDenominator = 25   ) %>% tibble() #> Resampling with minimum group count: 71  # Plot AA-4 KRI vs reference portfolio confidence intervals Visualize_StudyKRI(   dfStudyKRI = dfTransformed,   dfBoundsRef = df_Bounds_Ref,   dfBounds = df_Bounds,   strStudyID = \"AA-4\" )"},{"path":"https://impala-consortium.github.io/gsm.studykri/index.html","id":"ai-disclaimer","dir":"","previous_headings":"","what":"AI Disclaimer","title":"What the Package Does (One Line, Title Case)","text":"package documentation developed assistance AI tools, including Cursor Claude Sonnet 4.5. AI-generated content reviewed.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"What the Package Does (One Line, Title Case)","text":"MIT © 2025 IMPALA Consortium","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bootstrap Resamples for Study-Level KRI Analysis — Analyze_StudyKRI","title":"Generate Bootstrap Resamples for Study-Level KRI Analysis — Analyze_StudyKRI","text":"Generates bootstrap resamples resampling groups (sites/countries) replacement within study. Uses dbplyr-compatible approach runif() random selection. bootstrap replicate randomly selects groups includes associated data.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bootstrap Resamples for Study-Level KRI Analysis — Analyze_StudyKRI","text":"","code":"Analyze_StudyKRI(   dfInput,   nBootstrapReps = 1000,   nGroups = NULL,   strStudyCol = \"StudyID\",   strGroupCol = \"GroupID\",   seed = NULL,   tblBootstrapReps = NULL )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bootstrap Resamples for Study-Level KRI Analysis — Analyze_StudyKRI","text":"dfInput data.frame tbl_lazy. Group-level data Input_CumCountSiteByMonth. Expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric, StudyID, MonthYYYYMM (custom column names specified parameters). nBootstrapReps integer. Number bootstrap replicates generate. Defaults 1000. nGroups integer NULL. Number groups resample per replicate. NULL (default), uses actual number groups per study. specified, can used upsample (larger actual) downsample (smaller actual). strStudyCol character. Column name study identifier. Defaults \"StudyID\". strGroupCol character. Column name group identifier. Defaults \"GroupID\". seed integer NULL. Random seed reproducibility. NULL (default), seed set. Note: seed affects -memory data frames, SQL queries. tblBootstrapReps tbl_lazy, data.frame, NULL. lazy table inputs: Optional pre-generated bootstrap replicate indices. Must 'BootstrapRep' column values 1 nBootstrapReps. NULL, attempts create temp table (requires write privileges).","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bootstrap Resamples for Study-Level KRI Analysis — Analyze_StudyKRI","text":"data.frame (tbl_lazy input lazy) original columns plus: BootstrapRep: integer, bootstrap replicate number (1 nBootstrapReps) Original data rows replicated across bootstrap samples groups resampled replacement","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Bootstrap Resamples for Study-Level KRI Analysis — Analyze_StudyKRI","text":"","code":"# Generate group-level data dfSubjects <- clindata::rawplus_dm dfNumerator <- clindata::rawplus_ae dfDenominator <- clindata::rawplus_visdt  dfInput <- Input_CountSiteByMonth(   dfSubjects = dfSubjects,   dfNumerator = dfNumerator,   dfDenominator = dfDenominator,   strNumeratorDateCol = \"aest_dt\",   strDenominatorDateCol = \"visit_dt\" )  # Generate bootstrap samples dfBootstrap <- Analyze_StudyKRI(   dfInput = dfInput,   nBootstrapReps = 100,   seed = 42 )  # Aggregate each bootstrap replicate to study level dfStudyLevel <- Transform_CumCount(   dfInput = dfBootstrap,   vBy = c(\"StudyID\", \"BootstrapRep\"),   nMinDenominator = 25 )  print(head(dfStudyLevel)) #>          StudyID BootstrapRep MonthYYYYMM StudyMonth Numerator Denominator #> 1 AA-AA-000-0000            1      200402          1         2          40 #> 2 AA-AA-000-0000            1      200403          2         8          65 #> 3 AA-AA-000-0000            1      200404          3        13          98 #> 4 AA-AA-000-0000            1      200405          4        23         144 #> 5 AA-AA-000-0000            1      200406          5        24         188 #> 6 AA-AA-000-0000            1      200407          6        35         243 #>      Metric GroupCount #> 1 0.0500000          8 #> 2 0.1230769         11 #> 3 0.1326531         13 #> 4 0.1597222         16 #> 5 0.1276596         19 #> 6 0.1440329         22"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Confidence Intervals from Bootstrap Distribution — Analyze_StudyKRI_PredictBounds","title":"Calculate Confidence Intervals from Bootstrap Distribution — Analyze_StudyKRI_PredictBounds","text":"Calculates percentile-based confidence intervals bootstrap distributions study-level KRI metrics. Returns median estimates upper lower confidence bounds time point. Supports single-study multi-study comparison scenarios full dbplyr compatibility.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Confidence Intervals from Bootstrap Distribution — Analyze_StudyKRI_PredictBounds","text":"","code":"Analyze_StudyKRI_PredictBounds(   dfInput,   vBy = \"StudyID\",   nConfLevel = 0.95,   strMetricCol = \"Metric\",   strStudyMonthCol = \"StudyMonth\" )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Confidence Intervals from Bootstrap Distribution — Analyze_StudyKRI_PredictBounds","text":"dfInput data.frame tbl. Bootstrapped study-level data Transform_CumCount BootstrapRep column. Must contain columns: vBy columns, StudyMonth, Metric, BootstrapRep. vBy character. Vector column names grouping CI calculation. Use \"StudyID\" single study analysis, character(0) combined multi-study analysis. Default: \"StudyID\". nConfLevel numeric. Confidence level 0 1. Default: 0.95 (95% confidence interval). strMetricCol character. Name metric column. Default: \"Metric\". strStudyMonthCol character. Name study month column. Default: \"StudyMonth\".","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Confidence Intervals from Bootstrap Distribution — Analyze_StudyKRI_PredictBounds","text":"data.frame (tbl_lazy input lazy) columns: vBy columns (length(vBy) > 0) StudyMonth: Sequential month number MedianMetric: Median metric value across bootstrap samples LowerBound: Lower confidence bound UpperBound: Upper confidence bound BootstrapCount: Number bootstrap samples used","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Confidence Intervals from Bootstrap Distribution — Analyze_StudyKRI_PredictBounds","text":"","code":"if (FALSE) { # \\dontrun{ # Single study analysis dfBootstrap <- Analyze_StudyKRI(   dfInput = dfInput,   nBootstrapReps = 1000,   seed = 42 )  dfBootstrapStudy <- Transform_CumCount(   dfInput = dfBootstrap,   vBy = c(\"StudyID\", \"BootstrapRep\"),   nMinDenominator = 25 )  dfBounds <- Analyze_StudyKRI_PredictBounds(   dfInput = dfBootstrapStudy,   vBy = \"StudyID\",   nConfLevel = 0.95 )  # Multi-study comparison (combined) dfComparison <- dfBootstrapStudy %>%   dplyr::filter(StudyID %in% c(\"STUDY1\", \"STUDY2\", \"STUDY3\"))  dfBoundsRef <- Analyze_StudyKRI_PredictBounds(   dfInput = dfComparison,   vBy = character(0),  # Combine all studies   nConfLevel = 0.95 ) } # }"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Bounds for Multiple Studies Using Reference Study Mappings — Analyze_StudyKRI_PredictBoundsRef","title":"Predict Bounds for Multiple Studies Using Reference Study Mappings — Analyze_StudyKRI_PredictBoundsRef","text":"Wrapper Analyze_StudyKRI_PredictBoundsRefSet applies study-specific reference groups. study dfStudyRef, calculates bounds using mapped reference studies.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Bounds for Multiple Studies Using Reference Study Mappings — Analyze_StudyKRI_PredictBoundsRef","text":"","code":"Analyze_StudyKRI_PredictBoundsRef(   dfInput,   dfStudyRef,   strStudyCol = \"study\",   strStudyRefCol = \"studyref\",   nBootstrapReps = 1000,   nConfLevel = 0.95,   strGroupCol = \"GroupID\",   strStudyMonthCol = \"StudyMonth\",   strMetricCol = \"Metric\",   nMinDenominator = 25,   seed = NULL )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Bounds for Multiple Studies Using Reference Study Mappings — Analyze_StudyKRI_PredictBoundsRef","text":"dfInput data.frame tbl_lazy. Site-level data Input_CumCountSiteByMonth. dfStudyRef data.frame. Study--reference mappings two columns specified strStudyCol strStudyRefCol. strStudyCol character. Column name dfStudyRef target studies (default: \"study\"). strStudyRefCol character. Column name dfStudyRef reference studies (default: \"studyref\"). nBootstrapReps integer. Number bootstrap replicates (default: 1000). nConfLevel numeric. Confidence level bounds (default: 0.95). strGroupCol character. Column name group identifier (default: \"GroupID\"). strStudyMonthCol character. Column name study month (default: \"StudyMonth\"). strMetricCol character. Column name metric (default: \"Metric\"). nMinDenominator numeric. Minimum denominator (default: 25). seed integer NULL. Random seed (default: NULL).","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Bounds for Multiple Studies Using Reference Study Mappings — Analyze_StudyKRI_PredictBoundsRef","text":"data.frame columns: StudyID, StudyRefID, StudyMonth, MedianMetric, LowerBound, UpperBound, BootstrapCount, GroupCount, StudyCount.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Bounds for Multiple Studies Using Reference Study Mappings — Analyze_StudyKRI_PredictBoundsRef","text":"","code":"# Create study reference mapping dfStudyRef <- data.frame(   study = c(rep(\"STUDY1\", 2), rep(\"STUDY2\", 2)),   studyref = c(\"REF1\", \"REF2\", \"REF2\", \"REF3\") )  # Create site-level data dfSiteLevel <- data.frame(   StudyID = rep(c(\"STUDY1\", \"STUDY2\", \"REF1\", \"REF2\", \"REF3\"), each = 60),   GroupID = rep(paste0(\"Site\", 1:10), each = 6, times = 5),   Numerator = sample(0:5, 300, replace = TRUE),   Denominator = sample(10:20, 300, replace = TRUE),   MonthYYYYMM = rep(rep(202301:202306, each = 10), times = 5),   Metric = runif(300, 0.1, 0.5),   GroupLevel = \"Site\" )  # Calculate study-specific reference bounds dfBounds <- Analyze_StudyKRI_PredictBoundsRef(   dfInput = dfSiteLevel,   dfStudyRef = dfStudyRef,   nBootstrapReps = 100,   seed = 42 ) #> Resampling with minimum group count: 10 #> Resampling with minimum group count: 10  print(head(dfBounds)) #>   StudyMonth MedianMetric LowerBound UpperBound BootstrapCount GroupCount #> 1          1    0.1609729  0.1045548  0.2035928            100         10 #> 2          2    0.1759777  0.1475652  0.2169918            100         10 #> 3          3    0.1735380  0.1510965  0.1988901            100         10 #> 4          4    0.1724547  0.1514333  0.1928321            100         10 #> 5          5    0.1684342  0.1485709  0.1857495            100         10 #> 6          6    0.1704308  0.1530549  0.1843249             98         10 #>   StudyCount StudyID StudyRefID #> 1          2  STUDY1 REF1, REF2 #> 2          2  STUDY1 REF1, REF2 #> 3          2  STUDY1 REF1, REF2 #> 4          2  STUDY1 REF1, REF2 #> 5          2  STUDY1 REF1, REF2 #> 6          2  STUDY1 REF1, REF2"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRefSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Bounds for Combined Group of Studies — Analyze_StudyKRI_PredictBoundsRefSet","title":"Predict Bounds for Combined Group of Studies — Analyze_StudyKRI_PredictBoundsRefSet","text":"Calculates percentile-based confidence intervals (bounds) combined portfolio comparison studies. function creates \"comparison envelope\" : Finding minimum group (site) count across selected studies Resampling study minimum ensure fair comparison Combining data across studies Calculating confidence intervals pooled distribution enables comparing one study's KRI expected variation portfolio similar studies.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRefSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Bounds for Combined Group of Studies — Analyze_StudyKRI_PredictBoundsRefSet","text":"","code":"Analyze_StudyKRI_PredictBoundsRefSet(   dfInput,   vStudyFilter = NULL,   nBootstrapReps = 1000,   nConfLevel = 0.95,   strStudyCol = \"StudyID\",   strGroupCol = \"GroupID\",   strStudyMonthCol = \"StudyMonth\",   strMetricCol = \"Metric\",   nMinDenominator = 25,   seed = NULL )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRefSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Bounds for Combined Group of Studies — Analyze_StudyKRI_PredictBoundsRefSet","text":"dfInput data.frame tbl_lazy. Site-level data Input_CumCountSiteByMonth. Must contain columns: StudyID, GroupID, Numerator, Denominator, MonthYYYYMM. vStudyFilter character NULL. Study IDs include comparison group. NULL (default), uses studies found dfInput. Example: c(\"STUDY1\", \"STUDY2\", \"STUDY3\"). nBootstrapReps integer. Number bootstrap replicates (default: 1000). nConfLevel numeric. Confidence level bounds, 0 1 (default: 0.95 95% CI). strStudyCol character. Column name study identifier (default: \"StudyID\"). strGroupCol character. Column name group identifier (default: \"GroupID\"). strStudyMonthCol character. Column name sequential study month (default: \"StudyMonth\"). strMetricCol character. Column name metric (default: \"Metric\"). nMinDenominator numeric. Minimum denominator Transform_CumCount (default: 25). seed integer NULL. Random seed reproducibility (default: NULL).","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRefSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Bounds for Combined Group of Studies — Analyze_StudyKRI_PredictBoundsRefSet","text":"data.frame (tbl_lazy input lazy) confidence intervals. Output columns: StudyMonth, MedianMetric, LowerBound, UpperBound, BootstrapCount, GroupCount, StudyCount. Note: StudyID column studies intentionally combined.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Analyze_StudyKRI_PredictBoundsRefSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Bounds for Combined Group of Studies — Analyze_StudyKRI_PredictBoundsRefSet","text":"","code":"# Create example site-level data for multiple studies dfSiteLevel <- data.frame(   StudyID = rep(c(\"STUDY1\", \"STUDY2\", \"STUDY3\"), each = 60),   GroupID = rep(paste0(\"Site\", 1:10), each = 6, times = 3),   Numerator = sample(0:5, 180, replace = TRUE),   Denominator = sample(10:20, 180, replace = TRUE),   MonthYYYYMM = rep(rep(202301:202306, each = 10), times = 3),   Metric = runif(180, 0.1, 0.5),   GroupLevel = \"Site\",   stringsAsFactors = FALSE )  # Calculate comparison envelope from 3 studies dfGroupBounds <- Analyze_StudyKRI_PredictBoundsRefSet(   dfInput = dfSiteLevel,   vStudyFilter = c(\"STUDY1\", \"STUDY2\", \"STUDY3\"),   nBootstrapReps = 100,  # Use small number for example   nConfLevel = 0.95,   seed = 42 ) #> Resampling with minimum group count: 10  print(head(dfGroupBounds)) #>   StudyMonth MedianMetric LowerBound UpperBound BootstrapCount GroupCount #> 1          1    0.1781615  0.1375943  0.2106618            100         10 #> 2          2    0.1562525  0.1217324  0.1936074            100         10 #> 3          3    0.1662783  0.1370265  0.1973369            100         10 #> 4          4    0.1683761  0.1423421  0.1957048            100         10 #> 5          5    0.1712779  0.1467434  0.1950078            100         10 #> 6          6    0.1700583  0.1496072  0.1918633            100         10 #>   StudyCount #> 1          3 #> 2          3 #> 3          3 #> 4          3 #> 5          3 #> 6          3"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Input_CountSiteByMonth.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Monthly Count by Site and Month — Input_CountSiteByMonth","title":"Calculate Monthly Count by Site and Month — Input_CountSiteByMonth","text":"Calculates monthly event counts ratios site month KRI analysis. Joins subject, numerator, denominator data create monthly metrics. strDenominatorEndDateCol provided, calculates days start/end dates per month instead counting records. Note: function returns monthly counts, cumulative. Cumulative aggregation performed study level Transform_CumCount. Supports -memory data frames dbplyr lazy tables.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Input_CountSiteByMonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Monthly Count by Site and Month — Input_CountSiteByMonth","text":"","code":"Input_CountSiteByMonth(   dfSubjects,   dfNumerator,   dfDenominator,   strStudyCol = \"studyid\",   strGroupCol = \"invid\",   strGroupLevel = \"Site\",   strSubjectCol = \"subjid\",   strNumeratorDateCol,   strDenominatorDateCol,   strDenominatorEndDateCol = NULL )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Input_CountSiteByMonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Monthly Count by Site and Month — Input_CountSiteByMonth","text":"dfSubjects data.frame tbl. Subject-level data enrolled subjects. dfNumerator data.frame tbl. Event data numerator (e.g., adverse events). dfDenominator data.frame tbl. Event data denominator (e.g., visits). strStudyCol character. Column name study identifier (default: \"studyid\"). strGroupCol character. Column name site identifier (default: \"invid\"). strGroupLevel character. Grouping level name (default: \"Site\"). strSubjectCol character. Column name subject identifier (default: \"subjid\"). strNumeratorDateCol character. Date column name numerator data. strDenominatorDateCol character. Date column name denominator data (start date). strDenominatorEndDateCol character. End date column denominator data (default: NULL). provided, calculates sum days start/end dates per month instead record counts.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Input_CountSiteByMonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Monthly Count by Site and Month — Input_CountSiteByMonth","text":"data.frame columns: GroupID, GroupLevel, Numerator, Denominator, Metric, StudyID, MonthYYYYMM","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Input_CountSiteByMonth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Monthly Count by Site and Month — Input_CountSiteByMonth","text":"","code":"dfSubjects <- clindata::rawplus_dm dfNumerator <- clindata::rawplus_ae dfDenominator <- clindata::rawplus_visdt  # Count-based calculation result <- Input_CountSiteByMonth(   dfSubjects = dfSubjects,   dfNumerator = dfNumerator,   dfDenominator = dfDenominator,   strNumeratorDateCol = \"aest_dt\",   strDenominatorDateCol = \"visit_dt\" )  # Days-based calculation with end dates result_days <- Input_CountSiteByMonth(   dfSubjects = dfSubjects,   dfNumerator = dfNumerator,   dfDenominator = dfSubjects,   strNumeratorDateCol = \"aest_dt\",   strDenominatorDateCol = \"firstparticipantdate\",   strDenominatorEndDateCol = \"lastparticipantdate\" )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/MakeCharts_StudyKRI.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Study KRI Comparison Charts — MakeCharts_StudyKRI","title":"Create Study KRI Comparison Charts — MakeCharts_StudyKRI","text":"Generates ggplot2 charts comparing study-level KRIs comparison groups. Similar gsm.kri::MakeCharts uses Visualize_StudyKRI study comparisons.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/MakeCharts_StudyKRI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Study KRI Comparison Charts — MakeCharts_StudyKRI","text":"","code":"MakeCharts_StudyKRI(   dfResults,   dfBounds,   dfBoundsRef,   dfMetrics,   nMaxMonth = NULL )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/MakeCharts_StudyKRI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Study KRI Comparison Charts — MakeCharts_StudyKRI","text":"dfResults data.frame. Stacked study-level results (BindResults). dfBounds data.frame. Stacked study-specific bounds (BindResults). dfBoundsRef data.frame. Stacked reference/comparison group bounds (BindResults). dfMetrics data.frame. Metric metadata (MakeMetric). nMaxMonth integer. Maximum study month display (NULL = ).","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/MakeCharts_StudyKRI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Study KRI Comparison Charts — MakeCharts_StudyKRI","text":"list. Named list ggplot objects, one per study-metric combination. Names format \"StudyID_MetricID\" (e.g., \"STUDY001_kri0001\").","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Report_KRI_StudyKRI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate StudyKRI reports per study (Report_KRI-compatible) — Report_KRI_StudyKRI","title":"Generate StudyKRI reports per study (Report_KRI-compatible) — Report_KRI_StudyKRI","text":"Accepts inputs gsm.reporting::Report_KRI, iterates studies inferred lCharts (names formatted StudyID_MetricID) renders one report per study. Charts expected created gsm.studykri::MakeCharts_StudyKRI, already filters studies available reference bounds.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Report_KRI_StudyKRI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate StudyKRI reports per study (Report_KRI-compatible) — Report_KRI_StudyKRI","text":"","code":"Report_KRI_StudyKRI(   lCharts,   dfResults,   dfGroups,   dfMetrics,   strOutputFile,   strInputPath,   ... )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Report_KRI_StudyKRI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate StudyKRI reports per study (Report_KRI-compatible) — Report_KRI_StudyKRI","text":"lCharts list. Output MakeCharts_StudyKRI portfolio. dfResults data.frame. Bound results (e.g., BindResults(..., 'Analysis_Transformed')). dfGroups data.frame. Group metadata annotate report. dfMetrics data.frame. Metric metadata (e.g., MakeMetric(workflows)). strOutputFile character. Base output HTML path. study ID appended extension (e.g., report.html -> report_<StudyID>.html). strInputPath character. Path report template Rmd. ... Additional parameters forwarded gsm.kri::Report_KRI.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Report_KRI_StudyKRI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate StudyKRI reports per study (Report_KRI-compatible) — Report_KRI_StudyKRI","text":"Named character vector output file paths (names StudyIDs).","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/ResampleStudy.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Study Data — ResampleStudy","title":"Resample Study Data — ResampleStudy","text":"Creates resampled version study new subject study IDs. Supports stratified sampling based domain activity (e.g., oversample patients high protocol deviations) randomizes site assignments.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/ResampleStudy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Study Data — ResampleStudy","text":"","code":"ResampleStudy(   lRaw,   strNewStudyID,   nSubjects = NULL,   TargetSiteCount = NULL,   replacement = TRUE,   strOversamplDomain = NULL,   vOversamplQuantileRange = c(0, 1),   seed = NULL )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/ResampleStudy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Study Data — ResampleStudy","text":"lRaw Named list raw data domains (e.g., Raw_SUBJ, Raw_AE, etc.) strNewStudyID Character string new study ID nSubjects Integer number subjects sample. NULL (default) samples number enrolled subjects original data TargetSiteCount Numeric. Approximate target number sites resampled study. NULL (default), uses sites sampled subjects naturally. specified, generates approximately N sites weighted patient distributions. Note: Final site count may vary sites zero patients excluded. Must positive integer. replacement Logical indicating whether sample replacement (default: TRUE) strOversamplDomain Character string naming domain use stratified sampling. NULL (default) samples enrolled subjects vOversamplQuantileRange Numeric vector length 2 quantile range (0-1) oversampling. Default c(0, 1) includes subjects seed Integer seed reproducibility. NULL (default) uses current random state","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/ResampleStudy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Study Data — ResampleStudy","text":"Named list resampled data domains updated IDs","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/ResampleStudy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resample Study Data — ResampleStudy","text":"function performs following steps: Optionally filters subjects activity level specified domain Samples subjects without replacement Randomizes site assignments shuffling invid values (generates new sites TargetSiteCount specified) Updates subject, study, site IDs across domains Maintains referential integrity across domains TargetSiteCount specified: Generates TargetSiteCount site IDs metadata sampled original sites Samples patient counts per site distribution observed sampled subjects Creates weighted site assignment: subjects assigned sites proportionally sampled patient counts Final site count may less target sites receive patients sampling function handles multiple subject ID formats: subjid: Simple ID (e.g., \"0496\") subjectid: Composite ID (e.g., \"X1670496-113XXX\") subject_nsv: NSV format (e.g., \"0496-113XXX\")","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/ResampleStudy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample Study Data — ResampleStudy","text":"","code":"# Load test data lRaw <- list(   Raw_SUBJ = clindata::rawplus_dm,   Raw_AE = clindata::rawplus_ae,   Raw_SITE = clindata::ctms_site,   Raw_STUDY = clindata::ctms_study )  # Standard resampling lStudy1 <- ResampleStudy(lRaw, \"STUDY001\", seed = 123)  # Oversample from high-AE patients (top 25%) lStudy2 <- ResampleStudy(   lRaw,   \"STUDY002\",   nSubjects = 50,   strOversamplDomain = \"Raw_AE\",   vOversamplQuantileRange = c(0.75, 1.0),   seed = 456 ) #> Filtered to 309 subjects with Raw_AE records in 0.75-1.00 quantile range (6-31 records)  # Generate study with target of ~30 sites lStudy3 <- ResampleStudy(   lRaw,   \"STUDY003\",   nSubjects = 200,   TargetSiteCount = 30,   seed = 789 )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/SimulatePortfolio.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Portfolio of Studies — SimulatePortfolio","title":"Simulate a Portfolio of Studies — SimulatePortfolio","text":"Creates portfolio multiple synthetic studies resampling source data. study generated using ResampleStudy configurable parameters.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/SimulatePortfolio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Portfolio of Studies — SimulatePortfolio","text":"","code":"SimulatePortfolio(lRaw, dfConfig = NULL, nStudies = 5, seed = NULL)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/SimulatePortfolio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Portfolio of Studies — SimulatePortfolio","text":"lRaw list. Named list raw data domains (must include Raw_SUBJ). dfConfig data.frame. Optional configuration study. Must contain columns 'studyid' 'nSubjects'. See Details. nStudies numeric. Number studies generate dfConfig NULL. Default: 5. seed numeric. Random seed reproducibility. Default: NULL.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/SimulatePortfolio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Portfolio of Studies — SimulatePortfolio","text":"list. Combined portfolio structure lRaw, containing data simulated studies row-bound together.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/SimulatePortfolio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Portfolio of Studies — SimulatePortfolio","text":"dfConfig provided, contain: studyid: Unique study identifier nSubjects: Number subjects per study TargetSiteCount: (Optional) Target number sites strOversamplDomain: (Optional) Domain stratified sampling vOversamplQuantileRange_min/max: (Optional) Quantile range stratification replacement: (Optional) Sample replacement (default TRUE) dfConfig NULL, generates default configuration random parameters.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/SimulatePortfolio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Portfolio of Studies — SimulatePortfolio","text":"","code":"# Simple portfolio with default parameters lRaw <- list(   Raw_SUBJ = clindata::rawplus_dm,   Raw_AE = clindata::rawplus_ae,   Raw_SITE = clindata::ctms_site )  lPortfolio <- SimulatePortfolio(lRaw, nStudies = 3, seed = 123)  # Custom configuration dfConfig <- data.frame(   studyid = c(\"TRIAL001\", \"TRIAL002\"),   nSubjects = c(50, 75),   TargetSiteCount = c(15, 20) ) lPortfolio_custom <- SimulatePortfolio(lRaw, dfConfig = dfConfig, seed = 456)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Transform_CumCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Cumulative Counts to Study Level — Transform_CumCount","title":"Transform Cumulative Counts to Study Level — Transform_CumCount","text":"Transforms site-level cumulative counts study-level metrics aggregating across groups (sites/countries) calendar month. Creates sequential study months, applies minimum denominator filtering, calculates cumulative metrics. Supports -memory data frames dbplyr lazy tables.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Transform_CumCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Cumulative Counts to Study Level — Transform_CumCount","text":"","code":"Transform_CumCount(dfInput, vBy, nMinDenominator = 25, tblMonthSequence = NULL)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Transform_CumCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Cumulative Counts to Study Level — Transform_CumCount","text":"dfInput data.frame tbl. Output Input_CountSiteByMonth columns: GroupID, GroupLevel, Numerator, Denominator, Metric, StudyID, MonthYYYYMM. Note: Input contain monthly (cumulative) counts. function calculates cumulative sums study level. vBy character. Vector column names grouping (e.g., \"StudyID\" c(\"StudyID\", \"BootstrapRep\")). nMinDenominator numeric. Minimum cumulative denominator threshold filtering early/sparse data (default: 25). tblMonthSequence tbl_lazy, data.frame, NULL. lazy table inputs: Optional pre-generated complete month sequences. Must contain columns matching vBy MonthYYYYMM gaps. NULL, attempts create temp table (requires write privileges). data.frame provided, written temp table.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Transform_CumCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Cumulative Counts to Study Level — Transform_CumCount","text":"data.frame study-level aggregated cumulative counts ratios. Output columns: vBy columns, MonthYYYYMM, StudyMonth, Numerator, Denominator, Metric, GroupCount. Note: Numerator Denominator cumulative sums. Metric ratio.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Transform_CumCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Cumulative Counts to Study Level — Transform_CumCount","text":"","code":"# Generate input data dfSubjects <- clindata::rawplus_dm dfNumerator <- clindata::rawplus_ae dfDenominator <- clindata::rawplus_visdt  dfInput <- Input_CountSiteByMonth(   dfSubjects = dfSubjects,   dfNumerator = dfNumerator,   dfDenominator = dfDenominator,   strNumeratorDateCol = \"aest_dt\",   strDenominatorDateCol = \"visit_dt\" )  # Transform to study level dfTransformed <- Transform_CumCount(   dfInput = dfInput,   vBy = \"StudyID\",   nMinDenominator = 25 )  print(dfTransformed) #>            StudyID MonthYYYYMM StudyMonth Numerator Denominator    Metric #> 1   AA-AA-000-0000      200401          1         4          33 0.1212121 #> 2   AA-AA-000-0000      200402          2         5          50 0.1000000 #> 3   AA-AA-000-0000      200403          3        11          78 0.1410256 #> 4   AA-AA-000-0000      200404          4        23         114 0.2017544 #> 5   AA-AA-000-0000      200405          5        34         161 0.2111801 #> 6   AA-AA-000-0000      200406          6        39         213 0.1830986 #> 7   AA-AA-000-0000      200407          7        55         278 0.1978417 #> 8   AA-AA-000-0000      200408          8        67         363 0.1845730 #> 9   AA-AA-000-0000      200409          9        88         447 0.1968680 #> 10  AA-AA-000-0000      200410         10       105         538 0.1951673 #> 11  AA-AA-000-0000      200411         11       115         627 0.1834131 #> 12  AA-AA-000-0000      200412         12       123         722 0.1703601 #> 13  AA-AA-000-0000      200501         13       140         815 0.1717791 #> 14  AA-AA-000-0000      200502         14       151         906 0.1666667 #> 15  AA-AA-000-0000      200503         15       169        1016 0.1663386 #> 16  AA-AA-000-0000      200504         16       186        1145 0.1624454 #> 17  AA-AA-000-0000      200505         17       201        1270 0.1582677 #> 18  AA-AA-000-0000      200506         18       234        1400 0.1671429 #> 19  AA-AA-000-0000      200507         19       255        1543 0.1652625 #> 20  AA-AA-000-0000      200508         20       279        1695 0.1646018 #> 21  AA-AA-000-0000      200509         21       305        1836 0.1661220 #> 22  AA-AA-000-0000      200510         22       322        1985 0.1622166 #> 23  AA-AA-000-0000      200511         23       339        2145 0.1580420 #> 24  AA-AA-000-0000      200512         24       361        2303 0.1567521 #> 25  AA-AA-000-0000      200601         25       386        2465 0.1565923 #> 26  AA-AA-000-0000      200602         26       415        2616 0.1586391 #> 27  AA-AA-000-0000      200603         27       468        2794 0.1675018 #> 28  AA-AA-000-0000      200604         28       480        2957 0.1623267 #> 29  AA-AA-000-0000      200605         29       494        3133 0.1576763 #> 30  AA-AA-000-0000      200606         30       519        3299 0.1573204 #> 31  AA-AA-000-0000      200607         31       543        3474 0.1563040 #> 32  AA-AA-000-0000      200608         32       573        3644 0.1572448 #> 33  AA-AA-000-0000      200609         33       600        3816 0.1572327 #> 34  AA-AA-000-0000      200610         34       631        3987 0.1582644 #> 35  AA-AA-000-0000      200611         35       654        4136 0.1581238 #> 36  AA-AA-000-0000      200612         36       677        4307 0.1571860 #> 37  AA-AA-000-0000      200701         37       703        4468 0.1573411 #> 38  AA-AA-000-0000      200702         38       725        4613 0.1571645 #> 39  AA-AA-000-0000      200703         39       748        4782 0.1564199 #> 40  AA-AA-000-0000      200704         40       773        4941 0.1564461 #> 41  AA-AA-000-0000      200705         41       787        5105 0.1541626 #> 42  AA-AA-000-0000      200706         42       827        5282 0.1565695 #> 43  AA-AA-000-0000      200707         43       857        5456 0.1570748 #> 44  AA-AA-000-0000      200708         44       889        5660 0.1570671 #> 45  AA-AA-000-0000      200709         45       932        5821 0.1601099 #> 46  AA-AA-000-0000      200710         46       961        6006 0.1600067 #> 47  AA-AA-000-0000      200711         47       994        6170 0.1611021 #> 48  AA-AA-000-0000      200712         48      1021        6338 0.1610918 #> 49  AA-AA-000-0000      200801         49      1055        6500 0.1623077 #> 50  AA-AA-000-0000      200802         50      1080        6665 0.1620405 #> 51  AA-AA-000-0000      200803         51      1095        6824 0.1604631 #> 52  AA-AA-000-0000      200804         52      1130        6993 0.1615902 #> 53  AA-AA-000-0000      200805         53      1158        7161 0.1617093 #> 54  AA-AA-000-0000      200806         54      1196        7340 0.1629428 #> 55  AA-AA-000-0000      200807         55      1231        7519 0.1637186 #> 56  AA-AA-000-0000      200808         56      1259        7706 0.1633792 #> 57  AA-AA-000-0000      200809         57      1301        7872 0.1652693 #> 58  AA-AA-000-0000      200810         58      1328        8035 0.1652769 #> 59  AA-AA-000-0000      200811         59      1345        8187 0.1642848 #> 60  AA-AA-000-0000      200812         60      1370        8350 0.1640719 #> 61  AA-AA-000-0000      200901         61      1402        8518 0.1645926 #> 62  AA-AA-000-0000      200902         62      1433        8662 0.1654352 #> 63  AA-AA-000-0000      200903         63      1457        8829 0.1650244 #> 64  AA-AA-000-0000      200904         64      1480        8994 0.1645541 #> 65  AA-AA-000-0000      200905         65      1512        9186 0.1645983 #> 66  AA-AA-000-0000      200906         66      1555        9361 0.1661147 #> 67  AA-AA-000-0000      200907         67      1583        9545 0.1658460 #> 68  AA-AA-000-0000      200908         68      1626        9720 0.1672840 #> 69  AA-AA-000-0000      200909         69      1658        9880 0.1678138 #> 70  AA-AA-000-0000      200910         70      1686       10048 0.1677946 #> 71  AA-AA-000-0000      200911         71      1704       10194 0.1671572 #> 72  AA-AA-000-0000      200912         72      1724       10345 0.1666506 #> 73  AA-AA-000-0000      201001         73      1757       10508 0.1672059 #> 74  AA-AA-000-0000      201002         74      1773       10649 0.1664945 #> 75  AA-AA-000-0000      201003         75      1799       10808 0.1664508 #> 76  AA-AA-000-0000      201004         76      1826       10976 0.1663630 #> 77  AA-AA-000-0000      201005         77      1858       11145 0.1667115 #> 78  AA-AA-000-0000      201006         78      1871       11310 0.1654288 #> 79  AA-AA-000-0000      201007         79      1895       11491 0.1649117 #> 80  AA-AA-000-0000      201008         80      1918       11668 0.1643812 #> 81  AA-AA-000-0000      201009         81      1952       11839 0.1648788 #> 82  AA-AA-000-0000      201010         82      1989       12014 0.1655569 #> 83  AA-AA-000-0000      201011         83      2024       12182 0.1661468 #> 84  AA-AA-000-0000      201012         84      2053       12351 0.1662214 #> 85  AA-AA-000-0000      201101         85      2076       12516 0.1658677 #> 86  AA-AA-000-0000      201102         86      2103       12676 0.1659041 #> 87  AA-AA-000-0000      201103         87      2130       12849 0.1657717 #> 88  AA-AA-000-0000      201104         88      2166       13027 0.1662701 #> 89  AA-AA-000-0000      201105         89      2196       13203 0.1663258 #> 90  AA-AA-000-0000      201106         90      2235       13378 0.1670653 #> 91  AA-AA-000-0000      201107         91      2258       13567 0.1664333 #> 92  AA-AA-000-0000      201108         92      2286       13726 0.1665452 #> 93  AA-AA-000-0000      201109         93      2318       13888 0.1669067 #> 94  AA-AA-000-0000      201110         94      2345       14060 0.1667852 #> 95  AA-AA-000-0000      201111         95      2369       14225 0.1665378 #> 96  AA-AA-000-0000      201112         96      2403       14412 0.1667361 #> 97  AA-AA-000-0000      201201         97      2437       14606 0.1668492 #> 98  AA-AA-000-0000      201202         98      2467       14773 0.1669938 #> 99  AA-AA-000-0000      201203         99      2492       14948 0.1667113 #> 100 AA-AA-000-0000      201204        100      2523       15119 0.1668761 #> 101 AA-AA-000-0000      201205        101      2562       15310 0.1673416 #> 102 AA-AA-000-0000      201206        102      2589       15492 0.1671185 #> 103 AA-AA-000-0000      201207        103      2624       15668 0.1674751 #> 104 AA-AA-000-0000      201208        104      2657       15850 0.1676341 #> 105 AA-AA-000-0000      201209        105      2673       16030 0.1667498 #> 106 AA-AA-000-0000      201210        106      2697       16206 0.1664198 #> 107 AA-AA-000-0000      201211        107      2719       16359 0.1662082 #> 108 AA-AA-000-0000      201212        108      2746       16534 0.1660820 #> 109 AA-AA-000-0000      201301        109      2771       16686 0.1660674 #> 110 AA-AA-000-0000      201302        110      2789       16834 0.1656766 #> 111 AA-AA-000-0000      201303        111      2814       16997 0.1655586 #> 112 AA-AA-000-0000      201304        112      2832       17179 0.1648524 #> 113 AA-AA-000-0000      201305        113      2852       17352 0.1643615 #> 114 AA-AA-000-0000      201306        114      2877       17528 0.1641374 #> 115 AA-AA-000-0000      201307        115      2905       17720 0.1639391 #> 116 AA-AA-000-0000      201308        116      2933       17901 0.1638456 #> 117 AA-AA-000-0000      201309        117      2963       18070 0.1639734 #> 118 AA-AA-000-0000      201310        118      2988       18244 0.1637799 #> 119 AA-AA-000-0000      201311        119      3000       18394 0.1630967 #> 120 AA-AA-000-0000      201312        120      3042       18563 0.1638744 #> 121 AA-AA-000-0000      201401        121      3069       18719 0.1639511 #> 122 AA-AA-000-0000      201402        122      3094       18870 0.1639640 #> 123 AA-AA-000-0000      201403        123      3123       19041 0.1640145 #> 124 AA-AA-000-0000      201404        124      3161       19215 0.1645069 #> 125 AA-AA-000-0000      201405        125      3180       19382 0.1640698 #> 126 AA-AA-000-0000      201406        126      3215       19572 0.1642653 #> 127 AA-AA-000-0000      201407        127      3238       19747 0.1639743 #> 128 AA-AA-000-0000      201408        128      3266       19927 0.1638982 #> 129 AA-AA-000-0000      201409        129      3303       20087 0.1644347 #> 130 AA-AA-000-0000      201410        130      3335       20251 0.1646832 #> 131 AA-AA-000-0000      201411        131      3358       20400 0.1646078 #> 132 AA-AA-000-0000      201412        132      3378       20553 0.1643556 #> 133 AA-AA-000-0000      201501        133      3411       20703 0.1647587 #> 134 AA-AA-000-0000      201502        134      3433       20840 0.1647313 #> 135 AA-AA-000-0000      201503        135      3453       20998 0.1644442 #> 136 AA-AA-000-0000      201504        136      3477       21158 0.1643350 #> 137 AA-AA-000-0000      201505        137      3509       21323 0.1645641 #> 138 AA-AA-000-0000      201506        138      3536       21496 0.1644957 #> 139 AA-AA-000-0000      201507        139      3564       21669 0.1644746 #> 140 AA-AA-000-0000      201508        140      3594       21840 0.1645604 #> 141 AA-AA-000-0000      201509        141      3613       21993 0.1642795 #> 142 AA-AA-000-0000      201510        142      3642       22138 0.1645135 #> 143 AA-AA-000-0000      201511        143      3676       22280 0.1649910 #> 144 AA-AA-000-0000      201512        144      3690       22439 0.1644458 #> 145 AA-AA-000-0000      201601        145      3711       22589 0.1642835 #> 146 AA-AA-000-0000      201602        146      3747       22739 0.1647830 #> 147 AA-AA-000-0000      201603        147      3773       22900 0.1647598 #> 148 AA-AA-000-0000      201604        148      3805       23060 0.1650043 #> 149 AA-AA-000-0000      201605        149      3816       23212 0.1643977 #> 150 AA-AA-000-0000      201606        150      3839       23369 0.1642775 #> 151 AA-AA-000-0000      201607        151      3857       23531 0.1639114 #> 152 AA-AA-000-0000      201608        152      3877       23681 0.1637177 #> 153 AA-AA-000-0000      201609        153      3889       23839 0.1631360 #> 154 AA-AA-000-0000      201610        154      3909       23992 0.1629293 #> 155 AA-AA-000-0000      201611        155      3940       24142 0.1632011 #> 156 AA-AA-000-0000      201612        156      3964       24302 0.1631141 #> 157 AA-AA-000-0000      201701        157      3993       24463 0.1632261 #> 158 AA-AA-000-0000      201702        158      4016       24618 0.1631327 #> 159 AA-AA-000-0000      201703        159      4047       24787 0.1632711 #> 160 AA-AA-000-0000      201704        160      4098       24953 0.1642288 #> 161 AA-AA-000-0000      201705        161      4146       25132 0.1649690 #> 162 AA-AA-000-0000      201706        162      4172       25315 0.1648035 #> 163 AA-AA-000-0000      201707        163      4206       25508 0.1648894 #> 164 AA-AA-000-0000      201708        164      4242       25691 0.1651162 #> 165 AA-AA-000-0000      201709        165      4284       25869 0.1656036 #> 166 AA-AA-000-0000      201710        166      4314       26043 0.1656491 #> 167 AA-AA-000-0000      201711        167      4341       26208 0.1656364 #> 168 AA-AA-000-0000      201712        168      4369       26373 0.1656619 #> 169 AA-AA-000-0000      201801        169      4408       26527 0.1661703 #> 170 AA-AA-000-0000      201802        170      4424       26659 0.1659477 #> 171 AA-AA-000-0000      201803        171      4444       26808 0.1657714 #> 172 AA-AA-000-0000      201804        172      4461       26955 0.1654981 #> 173 AA-AA-000-0000      201805        173      4482       27099 0.1653936 #> 174 AA-AA-000-0000      201806        174      4502       27224 0.1653688 #> 175 AA-AA-000-0000      201807        175      4517       27335 0.1652460 #> 176 AA-AA-000-0000      201808        176      4538       27432 0.1654272 #> 177 AA-AA-000-0000      201809        177      4552       27510 0.1654671 #> 178 AA-AA-000-0000      201810        178      4561       27586 0.1653375 #> 179 AA-AA-000-0000      201811        179      4575       27637 0.1655390 #> 180 AA-AA-000-0000      201812        180      4584       27694 0.1655232 #> 181 AA-AA-000-0000      201901        181      4592       27748 0.1654894 #> 182 AA-AA-000-0000      201902        182      4599       27793 0.1654733 #> 183 AA-AA-000-0000      201903        183      4612       27850 0.1656014 #> 184 AA-AA-000-0000      201904        184      4617       27896 0.1655076 #> 185 AA-AA-000-0000      201905        185      4621       27947 0.1653487 #> 186 AA-AA-000-0000      201906        186      4631       27987 0.1654697 #> 187 AA-AA-000-0000      201907        187      4636       28025 0.1654237 #> 188 AA-AA-000-0000      201908        188      4641       28051 0.1654486 #> 189 AA-AA-000-0000      201909        189      4643       28069 0.1654138 #> 190 AA-AA-000-0000      201910        190      4643       28074 0.1653843 #>     GroupCount #> 1           12 #> 2           14 #> 3           19 #> 4           23 #> 5           29 #> 6           35 #> 7           41 #> 8           49 #> 9           51 #> 10          56 #> 11          58 #> 12          58 #> 13          56 #> 14          58 #> 15          64 #> 16          66 #> 17          63 #> 18          68 #> 19          66 #> 20          71 #> 21          71 #> 22          71 #> 23          74 #> 24          77 #> 25          77 #> 26          78 #> 27          80 #> 28          80 #> 29          80 #> 30          82 #> 31          84 #> 32          89 #> 33          80 #> 34          86 #> 35          78 #> 36          88 #> 37          82 #> 38          83 #> 39          86 #> 40          84 #> 41          83 #> 42          90 #> 43          85 #> 44          91 #> 45          84 #> 46          87 #> 47          81 #> 48          81 #> 49          80 #> 50          81 #> 51          82 #> 52          85 #> 53          81 #> 54          88 #> 55          88 #> 56          80 #> 57          81 #> 58          77 #> 59          75 #> 60          73 #> 61          75 #> 62          73 #> 63          74 #> 64          69 #> 65          81 #> 66          79 #> 67          87 #> 68          81 #> 69          81 #> 70          77 #> 71          71 #> 72          72 #> 73          72 #> 74          74 #> 75          74 #> 76          75 #> 77          81 #> 78          69 #> 79          77 #> 80          77 #> 81          76 #> 82          77 #> 83          70 #> 84          72 #> 85          71 #> 86          75 #> 87          72 #> 88          75 #> 89          81 #> 90          78 #> 91          83 #> 92          80 #> 93          83 #> 94          82 #> 95          82 #> 96          85 #> 97          83 #> 98          83 #> 99          87 #> 100         83 #> 101         82 #> 102         82 #> 103         75 #> 104         79 #> 105         77 #> 106         77 #> 107         75 #> 108         79 #> 109         77 #> 110         74 #> 111         77 #> 112         82 #> 113         82 #> 114         84 #> 115         89 #> 116         77 #> 117         81 #> 118         78 #> 119         74 #> 120         79 #> 121         73 #> 122         78 #> 123         77 #> 124         84 #> 125         76 #> 126         82 #> 127         75 #> 128         81 #> 129         72 #> 130         75 #> 131         74 #> 132         76 #> 133         74 #> 134         74 #> 135         77 #> 136         84 #> 137         87 #> 138         86 #> 139         86 #> 140         83 #> 141         82 #> 142         72 #> 143         78 #> 144         80 #> 145         75 #> 146         75 #> 147         76 #> 148         74 #> 149         76 #> 150         79 #> 151         72 #> 152         73 #> 153         69 #> 154         75 #> 155         68 #> 156         76 #> 157         75 #> 158         72 #> 159         76 #> 160         77 #> 161         76 #> 162         82 #> 163         78 #> 164         76 #> 165         80 #> 166         70 #> 167         74 #> 168         74 #> 169         73 #> 170         68 #> 171         68 #> 172         69 #> 173         64 #> 174         65 #> 175         56 #> 176         59 #> 177         46 #> 178         48 #> 179         33 #> 180         47 #> 181         36 #> 182         35 #> 183         38 #> 184         33 #> 185         34 #> 186         27 #> 187         30 #> 188         20 #> 189         18 #> 190          4"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Visualize_StudyKRI.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Study KRI with Confidence Intervals — Visualize_StudyKRI","title":"Visualize Study KRI with Confidence Intervals — Visualize_StudyKRI","text":"Creates layered visualization comparing study's KRI metric portfolio confidence intervals. plot shows: Portfolio/comparison group confidence intervals (light blue ribbon) Individual study confidence intervals (orange ribbon, optional) Actual study metric line (black line points) visualization helps identify study's performance deviates expected portfolio norms.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Visualize_StudyKRI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Study KRI with Confidence Intervals — Visualize_StudyKRI","text":"","code":"Visualize_StudyKRI(   dfStudyKRI,   dfBoundsRef = NULL,   dfBounds = NULL,   strStudyID,   strStudyMonthCol = \"StudyMonth\",   strMetricCol = \"Metric\",   nMaxMonth = NULL,   strTitle = NULL,   strSubtitle = NULL,   strYlab = \"Metric\",   strXlab = \"Study Month\" )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Visualize_StudyKRI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Study KRI with Confidence Intervals — Visualize_StudyKRI","text":"dfStudyKRI data.frame. Actual study-level metric data Transform_CumCount. Must contain columns specified strStudyMonthCol strMetricCol. StudyID column exists, data automatically filtered strStudyID. dfBoundsRef data.frame NULL. Portfolio/comparison group confidence intervals Analyze_StudyKRI_PredictBoundsRef (optional, default: NULL). provided, must contain: StudyMonth, MedianMetric, LowerBound, UpperBound. NULL, plot show study data without reference comparison. dfBounds data.frame NULL. Individual study confidence intervals Analyze_StudyKRI_PredictBounds (optional). StudyID column exists, data automatically filtered strStudyID. provided, must contain: StudyMonth, MedianMetric, LowerBound, UpperBound. strStudyID character. Study ID filter data display title/subtitle. strStudyMonthCol character. Column name study month (default: \"StudyMonth\"). strMetricCol character. Column name metric (default: \"Metric\"). nMaxMonth integer NULL. Maximum study month display. NULL (default), shows available months. strTitle character NULL. Plot title. NULL, generates default title. strSubtitle character NULL. Plot subtitle. NULL, generates default showing comparison study count. strYlab character. Y-axis label (default: \"Metric\"). strXlab character. X-axis label (default: \"Study Month\").","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Visualize_StudyKRI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Study KRI with Confidence Intervals — Visualize_StudyKRI","text":"ggplot2 object can displayed, saved, customized.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/Visualize_StudyKRI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Study KRI with Confidence Intervals — Visualize_StudyKRI","text":"","code":"# Basic usage with reference bounds dfStudyKRI <- data.frame(   StudyID = rep(\"STUDY1\", 5),   StudyMonth = 1:5,   Metric = c(0.10, 0.12, 0.15, 0.14, 0.13) )  dfBoundsRef <- data.frame(   StudyMonth = 1:5,   MedianMetric = c(0.11, 0.13, 0.14, 0.15, 0.14),   LowerBound = c(0.08, 0.10, 0.11, 0.12, 0.11),   UpperBound = c(0.14, 0.16, 0.17, 0.18, 0.17) )  dfBounds <- data.frame(   StudyMonth = 1:5,   MedianMetric = c(0.10, 0.12, 0.15, 0.14, 0.13),   LowerBound = c(0.08, 0.10, 0.12, 0.11, 0.10),   UpperBound = c(0.12, 0.14, 0.18, 0.17, 0.16) )  # Plot with reference bounds p1 <- Visualize_StudyKRI(   dfStudyKRI = dfStudyKRI,   dfBoundsRef = dfBoundsRef,   dfBounds = dfBounds,   strStudyID = \"STUDY1\",   strYlab = \"Cumulative AE Rate per Visit\" )  # Plot without reference bounds (only study data) p2 <- Visualize_StudyKRI(   dfStudyKRI = dfStudyKRI,   dfBoundsRef = NULL,   dfBounds = dfBounds,   strStudyID = \"STUDY1\",   strYlab = \"Cumulative AE Rate per Visit\" )  # Plot with only study data (no bounds at all) p3 <- Visualize_StudyKRI(   dfStudyKRI = dfStudyKRI,   strStudyID = \"STUDY1\",   strYlab = \"Cumulative AE Rate per Visit\" )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/calculate_days_by_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Days Per Month from Date Range — calculate_days_by_month","title":"Calculate Days Per Month from Date Range — calculate_days_by_month","text":"Helper function calculates days contributed month start/end date pairs. Handles date ranges spanning multiple months dbplyr compatibility.","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/calculate_days_by_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Days Per Month from Date Range — calculate_days_by_month","text":"","code":"calculate_days_by_month(dfData, strStartDateCol, strEndDateCol, vGroupCols)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/calculate_days_by_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Days Per Month from Date Range — calculate_days_by_month","text":"dfData data.frame tbl date range records strStartDateCol character. Start date column name strEndDateCol character. End date column name vGroupCols character. Grouping columns preserve","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/calculate_days_by_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Days Per Month from Date Range — calculate_days_by_month","text":"data.frame tbl MonthYYYYMM Days columns","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/expand_lazy_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand Lazy Table with Fallback Strategy — expand_lazy_table","title":"Expand Lazy Table with Fallback Strategy — expand_lazy_table","text":"Handles expansion lazy tables consistent fallback: Use user-supplied expansion table provided Attempt write temp table database Throw expressive error write fails","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/expand_lazy_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand Lazy Table with Fallback Strategy — expand_lazy_table","text":"","code":"expand_lazy_table(   tblInput,   tblExpansion = NULL,   dfExpansion_mem,   strTempTableName,   strExpansionType )"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/expand_lazy_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand Lazy Table with Fallback Strategy — expand_lazy_table","text":"tblInput tbl_lazy. lazy table context (extracting connection) tblExpansion tbl_lazy, data.frame, NULL. User-supplied expansion dfExpansion_mem data.frame. -memory expansion data auto-generation strTempTableName character. Name temp table strExpansionType character. Description error messages","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/expand_lazy_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand Lazy Table with Fallback Strategy — expand_lazy_table","text":"tbl_lazy expansion table can joined","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/gsm.studykri-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gsm.studykri: What the Package Does (One Line, Title Case) — gsm.studykri-package","title":"gsm.studykri: What the Package Does (One Line, Title Case) — gsm.studykri-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/gsm.studykri-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gsm.studykri: What the Package Does (One Line, Title Case) — gsm.studykri-package","text":"Maintainer: First Last first.last@example.com (ORCID)","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/has_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if column exists in data frame — has_column","title":"Check if column exists in data frame — has_column","text":"Check column exists data frame","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/has_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if column exists in data frame — has_column","text":"","code":"has_column(df, col_name)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/process_derived_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Process derived domain (uses subject_nsv for lookup) — process_derived_domain","title":"Process derived domain (uses subject_nsv for lookup) — process_derived_domain","text":"Process derived domain (uses subject_nsv lookup)","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/process_derived_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process derived domain (uses subject_nsv for lookup) — process_derived_domain","text":"","code":"process_derived_domain(df, subject_mapping, new_study_id, raw_subj)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/process_site_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Process site metadata domain — process_site_domain","title":"Process site metadata domain — process_site_domain","text":"Process site metadata domain","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/process_site_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process site metadata domain — process_site_domain","text":"","code":"process_site_domain(df, new_study_id, used_site_ids, generated_sites = NULL)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/process_study_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Process study metadata domain — process_study_domain","title":"Process study metadata domain — process_study_domain","text":"Process study metadata domain","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/process_study_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process study metadata domain — process_study_domain","text":"","code":"process_study_domain(df, new_study_id)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/process_subject_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Process subject-level domain — process_subject_domain","title":"Process subject-level domain — process_subject_domain","text":"Process subject-level domain","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/process_subject_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process subject-level domain — process_subject_domain","text":"","code":"process_subject_domain(df, subject_mapping, new_study_id, sampled_subj)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/update_composite_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Update composite IDs by replacing old subjid with new subjid — update_composite_id","title":"Update composite IDs by replacing old subjid with new subjid — update_composite_id","text":"Update composite IDs replacing old subjid new subjid","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/update_composite_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update composite IDs by replacing old subjid with new subjid — update_composite_id","text":"","code":"update_composite_id(composite_id, old_subjid, new_subjid)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/validate_month_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Month Sequence Has No Gaps — validate_month_sequence","title":"Validate Month Sequence Has No Gaps — validate_month_sequence","text":"Validate Month Sequence Gaps","code":""},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/validate_month_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Month Sequence Has No Gaps — validate_month_sequence","text":"","code":"validate_month_sequence(tblMonthSeq, vGroupCols)"},{"path":"https://impala-consortium.github.io/gsm.studykri/reference/validate_month_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Month Sequence Has No Gaps — validate_month_sequence","text":"tblMonthSeq tbl_lazy data.frame. Month sequence validate vGroupCols character. Grouping columns (e.g., \"StudyID\")","code":""}]
